theme(legend.position = "none")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("2 seeds from 50 maternal trees") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#25 maternal trees 4 seeds per (100)
for(i in 1:50) {
same[i,1] = prop_capt_all_same[14,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[14,5,i]
eligible[i,1] = prop_capt_all_eligible[14,1,i]
eligible[i,2] = prop_capt_all_eligible[14,5,i]
skewed[i,1] = prop_capt_skewed[14,1,i]
skewed[i,2] = prop_capt_skewed[14,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("4 seeds from 25 maternal trees") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#10 maternal trees 10 seeds per
for(i in 1:50) {
same[i,1] = prop_capt_all_same[40,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[40,5,i]
eligible[i,1] = prop_capt_all_eligible[40,1,i]
eligible[i,2] = prop_capt_all_eligible[40,5,i]
skewed[i,1] = prop_capt_skewed[40,1,i]
skewed[i,2] = prop_capt_skewed[40,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("10 seeds from 10 maternal trees") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw()  +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#2 maternal trees 50 seeds per
for(i in 1:50) {
same[i,1] = prop_capt_all_same[230,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[230,5,i]
eligible[i,1] = prop_capt_all_eligible[230,1,i]
eligible[i,2] = prop_capt_all_eligible[230,5,i]
skewed[i,1] = prop_capt_skewed[230,1,i]
skewed[i,2] = prop_capt_skewed[230,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("50 seeds from 2 maternal trees") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#loading in the data
load("prop_alleles_capt_skewed_new.Rdata")
#defining the results arrays to store filtered data
same = array(dim=c(50,2)) #50 rows for 50 replicates, 2 columns for prop_capt and donor type
eligible = array(dim=c(50,2))
skewed = array(dim=c(50,2))
View(prop_capt_all_same)
#looping over simulation replicates to pull equivalent scenarios to comapre among donor modes
#50 maternal trees, 500 total seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[5,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[5,5,i]
eligible[i,1] = prop_capt_all_eligible[5,1,i]
eligible[i,2] = prop_capt_all_eligible[5,5,i]
skewed[i,1] = prop_capt_skewed[5,1,i]
skewed[i,2] = prop_capt_skewed[5,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("50 maternal trees, 500 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.7,1) +
theme(legend.position = "none")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("50 maternal trees, 500 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#25 maternal trees, 500 total seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[15,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[15,5,i]
eligible[i,1] = prop_capt_all_eligible[15,1,i]
eligible[i,2] = prop_capt_all_eligible[15,5,i]
skewed[i,1] = prop_capt_skewed[15,1,i]
skewed[i,2] = prop_capt_skewed[15,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("25 maternal trees, 500 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#10 maternal trees, 500 total seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[40,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[40,5,i]
eligible[i,1] = prop_capt_all_eligible[40,1,i]
eligible[i,2] = prop_capt_all_eligible[40,5,i]
skewed[i,1] = prop_capt_skewed[40,1,i]
skewed[i,2] = prop_capt_skewed[40,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("10 maternal trees, 500 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#2 maternal trees 500 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[215,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[215,5,i]
eligible[i,1] = prop_capt_all_eligible[215,1,i]
eligible[i,2] = prop_capt_all_eligible[215,5,i]
skewed[i,1] = prop_capt_skewed[215,1,i]
skewed[i,2] = prop_capt_skewed[215,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("2 maternal trees, 500 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#looping over simulation replicates to pull equivalent scenarios to comapre among donor modes
#50 maternal trees, 500 total seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[5,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[5,5,i]
eligible[i,1] = prop_capt_all_eligible[5,1,i]
eligible[i,2] = prop_capt_all_eligible[5,5,i]
skewed[i,1] = prop_capt_skewed[5,1,i]
skewed[i,2] = prop_capt_skewed[5,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("50 maternal trees, 500 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#25 maternal trees, 500 total seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[15,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[15,5,i]
eligible[i,1] = prop_capt_all_eligible[15,1,i]
eligible[i,2] = prop_capt_all_eligible[15,5,i]
skewed[i,1] = prop_capt_skewed[15,1,i]
skewed[i,2] = prop_capt_skewed[15,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("25 maternal trees, 500 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#10 maternal trees, 500 total seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[40,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[40,5,i]
eligible[i,1] = prop_capt_all_eligible[40,1,i]
eligible[i,2] = prop_capt_all_eligible[40,5,i]
skewed[i,1] = prop_capt_skewed[40,1,i]
skewed[i,2] = prop_capt_skewed[40,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("10 maternal trees, 500 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#2 maternal trees 500 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[215,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[215,5,i]
eligible[i,1] = prop_capt_all_eligible[215,1,i]
eligible[i,2] = prop_capt_all_eligible[215,5,i]
skewed[i,1] = prop_capt_skewed[215,1,i]
skewed[i,2] = prop_capt_skewed[215,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("2 maternal trees, 500 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#50 maternal trees, 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[1,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[1,5,i]
eligible[i,1] = prop_capt_all_eligible[1,1,i]
eligible[i,2] = prop_capt_all_eligible[1,5,i]
skewed[i,1] = prop_capt_skewed[1,1,i]
skewed[i,2] = prop_capt_skewed[1,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("50 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#25 maternal trees 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[7,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[7,5,i]
eligible[i,1] = prop_capt_all_eligible[7,1,i]
eligible[i,2] = prop_capt_all_eligible[7,5,i]
skewed[i,1] = prop_capt_skewed[7,1,i]
skewed[i,2] = prop_capt_skewed[7,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("25 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#10 maternal trees 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[20,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[20,5,i]
eligible[i,1] = prop_capt_all_eligible[20,1,i]
eligible[i,2] = prop_capt_all_eligible[20,5,i]
skewed[i,1] = prop_capt_skewed[20,1,i]
skewed[i,2] = prop_capt_skewed[20,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("10 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#2 maternal trees 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[135,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[135,5,i]
eligible[i,1] = prop_capt_all_eligible[135,1,i]
eligible[i,2] = prop_capt_all_eligible[135,5,i]
skewed[i,1] = prop_capt_skewed[135,1,i]
skewed[i,2] = prop_capt_skewed[135,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("2 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("2 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0,1) +
theme(legend.position = "none")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("2 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#50 maternal trees, 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[1,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[1,5,i]
eligible[i,1] = prop_capt_all_eligible[1,1,i]
eligible[i,2] = prop_capt_all_eligible[1,5,i]
skewed[i,1] = prop_capt_skewed[1,1,i]
skewed[i,2] = prop_capt_skewed[1,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("50 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#25 maternal trees 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[7,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[7,5,i]
eligible[i,1] = prop_capt_all_eligible[7,1,i]
eligible[i,2] = prop_capt_all_eligible[7,5,i]
skewed[i,1] = prop_capt_skewed[7,1,i]
skewed[i,2] = prop_capt_skewed[7,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("25 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
(
(
#10 maternal trees 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[20,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[20,5,i]
eligible[i,1] = prop_capt_all_eligible[20,1,i]
eligible[i,2] = prop_capt_all_eligible[20,5,i]
skewed[i,1] = prop_capt_skewed[20,1,i]
skewed[i,2] = prop_capt_skewed[20,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("10 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#2 maternal trees 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[135,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[135,5,i]
eligible[i,1] = prop_capt_all_eligible[135,1,i]
eligible[i,2] = prop_capt_all_eligible[135,5,i]
skewed[i,1] = prop_capt_skewed[135,1,i]
skewed[i,2] = prop_capt_skewed[135,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("2 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
