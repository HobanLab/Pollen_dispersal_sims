theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#50 maternal trees, 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[1,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[1,5,i]
eligible[i,1] = prop_capt_all_eligible[1,1,i]
eligible[i,2] = prop_capt_all_eligible[1,5,i]
skewed[i,1] = prop_capt_skewed[1,1,i]
skewed[i,2] = prop_capt_skewed[1,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("50 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#25 maternal trees 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[7,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[7,5,i]
eligible[i,1] = prop_capt_all_eligible[7,1,i]
eligible[i,2] = prop_capt_all_eligible[7,5,i]
skewed[i,1] = prop_capt_skewed[7,1,i]
skewed[i,2] = prop_capt_skewed[7,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("25 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
(
(
#10 maternal trees 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[20,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[20,5,i]
eligible[i,1] = prop_capt_all_eligible[20,1,i]
eligible[i,2] = prop_capt_all_eligible[20,5,i]
skewed[i,1] = prop_capt_skewed[20,1,i]
skewed[i,2] = prop_capt_skewed[20,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("10 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#2 maternal trees 100 seeds
for(i in 1:50) {
same[i,1] = prop_capt_all_same[135,1,i] #this is hard coded to pull the scenario--having issues filtering data from a 3D array
same[i,2] = prop_capt_all_same[135,5,i]
eligible[i,1] = prop_capt_all_eligible[135,1,i]
eligible[i,2] = prop_capt_all_eligible[135,5,i]
skewed[i,1] = prop_capt_skewed[135,1,i]
skewed[i,2] = prop_capt_skewed[135,5,i]
}
#data processing for plotting
equal_comparison = rbind(same, eligible, skewed)
equal_comparison = as.data.frame(equal_comparison)
colnames(equal_comparison) = c("prop_capt", "donor_type")
#plotting using a boxplot, includes all simulation replicates to note variation
ggplot(data=equal_comparison, aes(x=(donor_type), y=as.numeric(prop_capt), group=donor_type, fill=donor_type)) +
geom_boxplot() +
ylab("Proportion of alleles captured") +
xlab("Pollen donation type") +
ggtitle("2 maternal trees, 100 seeds total") +
scale_fill_manual(values = wes_palette("Moonrise3", n = 3)) +
theme_bw() +
theme(axis.title = element_blank()) +
ylim(0.2,1) +
theme(legend.position = "none")
#Load libraries required for the whole script
#library(rstanarm)
#options(mc.cores = parallel::detectCores())
library(dplyr)
#Load libraries required for the whole script
#library(rstanarm)
#options(mc.cores = parallel::detectCores())
library(dplyr)
library(tidyr)
#Load libraries required for the whole script
#library(rstanarm)
#options(mc.cores = parallel::detectCores())
library(dplyr)
library(tidyr)
library(ggplot2)
#Load libraries required for the whole script
#library(rstanarm)
#options(mc.cores = parallel::detectCores())
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
#Load in data
load("Rdata/tidy_df_realistic.Rdata")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
#Subset the data by maternal tree to run two separate models
sub_1 = tidy_df %>% subset(maternal_trees < 25)
sub_2 = tidy_df %>% subset(maternal_trees >= 25)
#Running the models
model_1 = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = sub_1)
model_2 = lm(prop_capt ~ total_seeds * maternal_trees * donor_type, data = sub_2)
#Creating a new dataframe of values to base predictions on
newd_1 = data.frame(maternal_trees=(rep(c(2,5,10), each=1500)), total_seeds=rep(seq(1,500,1),9), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 3)))
#Predictions
pmu_1 = predict(model_1, re.form=NA, transform = TRUE, newdata=newd_1)
newd_2 = data.frame(maternal_trees=(rep(c(25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),9), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 3)))
#Predictions
pmu_2 = predict(model_2, re.form=NA, transform = TRUE, newdata=newd_2)
#Creating a dataframe to plot in ggplot
preds_1 <- cbind(newd_1, pmu_1)
colnames(preds_1) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds_2 <- cbind(newd_2, pmu_2)
colnames(preds_2) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds = rbind(preds_1, preds_2)
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#f5d58e", "#96daf2", "#fcd2e9")
#defining more descriptive labels for the facets
mat_tree_labs = c("2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees") #removed 1 maternal tree
names(mat_tree_labs) = c("2", "5", "10", "25", "50", "100") #removed 1
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds*2), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees), labeller = labeller(maternal_trees = mat_tree_labs)) +
geom_line(data=preds, mapping = aes(x=(total_seeds*2), y=pmu, lty=donor_type), show.legend=F) +
ggtitle("Genetic diversity capture across all realistic sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "Single", "Skewed")) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
labs(color = "Donor Type")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds*2), y=as.numeric(prop_capt), color=donor_type), alpha=0.65) +
facet_wrap(vars(maternal_trees), labeller = labeller(maternal_trees = mat_tree_labs)) +
geom_line(data=preds, mapping = aes(x=(total_seeds*2), y=pmu, lty=donor_type), show.legend=F) +
ggtitle("Genetic diversity capture across all realistic sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "Single", "Skewed")) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
labs(color = "Donor Type")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds*2), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees), labeller = labeller(maternal_trees = mat_tree_labs)) +
geom_line(data=preds, mapping = aes(x=(total_seeds*2), y=pmu, lty=donor_type), show.legend=F) +
ggtitle("Genetic diversity capture across all realistic sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "Single", "Skewed")) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
labs(color = "Donor Type")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds*2), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees), labeller = labeller(maternal_trees = mat_tree_labs)) +
geom_line(data=preds, mapping = aes(x=(total_seeds*2), y=pmu, lty=donor_type), show.legend=F) +
ggtitle("Genetic diversity capture across all realistic sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "Single", "Skewed")) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
labs(color = "Donor Type")
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#E69F00", "#56B4E9", "#CC79A7")
#defining more descriptive labels for the facets
mat_tree_labs = c("2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees") #removed 1 maternal tree
names(mat_tree_labs) = c("2", "5", "10", "25", "50", "100") #removed 1
#Load libraries required for the whole script
#library(rstanarm)
#options(mc.cores = parallel::detectCores())
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
#Load in data
#load("Rdata/tidy_df_ideal.Rdata")
#Two pop data:
load("Rdata/tidy_df_ideal_twopop.Rdata")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
#Subset the data by maternal tree to run two separate models
sub_1 = tidy_df %>% subset(maternal_trees < 25)
sub_2 = tidy_df %>% subset(maternal_trees >= 25)
#Running the models
model_1 = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = sub_1)
#Creating a new dataframe of values to base predictions on
newd_1 = data.frame(maternal_trees=(rep(c(1,2,5,10), each=1500)), total_seeds=rep(seq(1,500,1),12), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 4)))
#Predictions
pmu_1 = predict(model_1, re.form=NA, transform = TRUE, newdata=newd_1)
newd_2 = data.frame(maternal_trees=(rep(c(25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),9), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 3)))
#Predictions
pmu_2 = predict(model_2, re.form=NA, transform = TRUE, newdata=newd_2)
#Creating a dataframe to plot in ggplot
preds_1 <- cbind(newd_1, pmu_1)
colnames(preds_1) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds_2 <- cbind(newd_2, pmu_2)
colnames(preds_2) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds = rbind(preds_1, preds_2)
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#E69F00", "#56B4E9", "#CC79A7")
#defining more descriptive labels for the facets
mat_tree_labs = c("1 maternal tree", "2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees")
names(mat_tree_labs) = c("1", "2", "5", "10", "25", "50", "100")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds*2), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees), labeller = labeller(maternal_trees = mat_tree_labs)) +
geom_line(data=preds, mapping = aes(x=(total_seeds*2), y=pmu, lty=donor_type), show.legend=F) +
ggtitle("Genetic diversity capture across all ideal sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "Single", "Skewed")) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
labs(color = "Donor Type")
#Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
#Load in data
load("../Rdata/tidy_df_ideal_twopop.Rdata")
#Load in data
load("Rdata/tidy_df_ideal_twopop.Rdata")
#Making sure the data is in the correct format
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
ggplot(tidy_df, aes(x=as.numeric(total_alleles))) +
geom_bar() +
ggtitle("Variation of total alleles simulated across replicates") +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#E69F00", "#56B4E9", "#CC79A7")
#defining more descriptive labels for the facets
mat_tree_labs = c("1 maternal tree", "2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees")
names(mat_tree_labs) = c("1", "2", "5", "10", "25", "50", "100")
tidy_df %>%
ggplot(aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type)) +
geom_point() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture across all ideal sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "All same", "Skewed")) +
labs(color = "Donor Type")
#Load in data
load("Rdata/tidy_df_ideal.Rdata")
View(tidy_df)
#Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
#Load in ideal data
load("Rdata/tidy_df.Rdata")
tidy_df_ideal = tidy_df
#Load in ideal data
load("Rdata/tidy_df.Rdata")
#Load in ideal data
load("Rdata/tidy_df_ideal.Rdata")
tidy_df_ideal = tidy_df
#remove col to make same # cols
tidy_df_ideal = subset(tidy_df_ideal, select = -c(seeds_per_tree))
#Realistic data
load("Rdata/tidy_df_realistic.Rdata")
tidy_df_realistic = tidy_df
#Create new columns to identify scenarios
tidy_df_ideal$samp_type = "ideal"
tidy_df_realistic$samp_type = "realistic"
View(tidy_df_ideal)
tidy_df_ideal %>% filter(maternal_trees == 2) %>%
filter(total_seeds == 200) %>%
filter(donor_type == "all_eligible")
eligible = tidy_df_ideal %>% filter(maternal_trees == 2) %>%
filter(total_seeds == 200) %>%
filter(donor_type == "all_eligible")
same = tidy_df_ideal %>% filter(maternal_trees == 2) %>%
filter(total_seeds == 200) %>%
filter(donor_type == "all_same")
mean(eligible$prop_capt)
mean(skewed$prop_capt)
skewed = tidy_df_ideal %>% filter(maternal_trees == 2) %>%
filter(total_seeds == 200) %>%
filter(donor_type == "skewed")
same = tidy_df_ideal %>% filter(maternal_trees == 2) %>%
filter(total_seeds == 200) %>%
filter(donor_type == "all_same")
mean(eligible$prop_capt)
mean(skewed$prop_capt)
mean(same$prop_capt)
View(eligible)
#Load libraries required for the whole script
#library(rstanarm)
#options(mc.cores = parallel::detectCores())
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
#Load in data
load("Rdata/tidy_df_ideal.Rdata")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
#Subset the data by maternal tree to run two separate models
sub_1 = tidy_df %>% subset(maternal_trees < 25)
sub_2 = tidy_df %>% subset(maternal_trees >= 25)
#Running the models
model_1 = glm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, family = binomial(link = 'logit'), data = sub_1)
model_2 = glm(prop_capt ~ total_seeds * maternal_trees * donor_type, family = binomial(link = 'logit'), data = sub_2)
#Running the models
model_1 = glm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, weight = total_seeds, family = binomial(link = 'logit'), data = sub_1)
model_2 = glm(prop_capt ~ total_seeds * maternal_trees * donor_type, weight = total_seeds, family = binomial(link = 'logit'), data = sub_2)
#Creating a new dataframe of values to base predictions on
newd_1 = data.frame(maternal_trees=(rep(c(1,2,5,10), each=1500)), total_seeds=rep(seq(1,500,1),12), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 4)))
#Predictions
pmu_1 = predict(model_1, re.form=NA, transform = TRUE, newdata=newd_1)
newd_2 = data.frame(maternal_trees=(rep(c(25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),9), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 3)))
#Predictions
pmu_2 = predict(model_2, re.form=NA, transform = TRUE, newdata=newd_2)
#Creating a dataframe to plot in ggplot
preds_1 <- cbind(newd_1, pmu_1)
colnames(preds_1) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds_2 <- cbind(newd_2, pmu_2)
colnames(preds_2) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds = rbind(preds_1, preds_2)
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#E69F00", "#56B4E9", "#CC79A7")
#defining more descriptive labels for the facets
mat_tree_labs = c("1 maternal tree", "2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees")
names(mat_tree_labs) = c("1", "2", "5", "10", "25", "50", "100")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds*2), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees), labeller = labeller(maternal_trees = mat_tree_labs)) +
geom_line(data=preds, mapping = aes(x=(total_seeds*2), y=pmu, lty=donor_type), show.legend=F) +
ggtitle("Genetic diversity capture across all ideal sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "Single", "Skewed")) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
labs(color = "Donor Type")
#Running the models
model_1 = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = sub_1)
#Creating a new dataframe of values to base predictions on
newd_1 = data.frame(maternal_trees=(rep(c(1,2,5,10), each=1500)), total_seeds=rep(seq(1,500,1),12), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 4)))
#Predictions
pmu_1 = predict(model_1, re.form=NA, transform = TRUE, newdata=newd_1)
newd_2 = data.frame(maternal_trees=(rep(c(25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),9), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 3)))
#Predictions
pmu_2 = predict(model_2, re.form=NA, transform = TRUE, newdata=newd_2)
#Creating a dataframe to plot in ggplot
preds_1 <- cbind(newd_1, pmu_1)
colnames(preds_1) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds_2 <- cbind(newd_2, pmu_2)
colnames(preds_2) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds = rbind(preds_1, preds_2)
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#E69F00", "#56B4E9", "#CC79A7")
#defining more descriptive labels for the facets
mat_tree_labs = c("1 maternal tree", "2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees")
names(mat_tree_labs) = c("1", "2", "5", "10", "25", "50", "100")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds*2), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees), labeller = labeller(maternal_trees = mat_tree_labs)) +
geom_line(data=preds, mapping = aes(x=(total_seeds*2), y=pmu, lty=donor_type), show.legend=F) +
ggtitle("Genetic diversity capture across all ideal sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "Single", "Skewed")) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
labs(color = "Donor Type")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
#Subset the data by maternal tree to run two separate models
sub_1 = tidy_df %>% subset(maternal_trees < 25)
sub_2 = tidy_df %>% subset(maternal_trees >= 25)
#Running the models
model_1 = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = sub_1)
#Running the models
model_1 = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = sub_1)
#Save the model since it takes so long to run
#save(transformed_model, file = "transformed_model.Rdata")
#Load the model from previously saved run
#load("transformed_model.Rdata")
#Model summary!
#summary(transformed_model, digits = 4)
```
#Running the models
model_1 = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = sub_1)
#Creating a new dataframe of values to base predictions on
newd_1 = data.frame(maternal_trees=(rep(c(1,2,5,10), each=1500)), total_seeds=rep(seq(1,500,1),12), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 4)))
model_2 = lm(prop_capt ~ total_seeds * maternal_trees * donor_type, data = sub_2)
#Creating a new dataframe of values to base predictions on
newd_1 = data.frame(maternal_trees=(rep(c(1,2,5,10), each=1500)), total_seeds=rep(seq(1,500,1),12), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 4)))
#Predictions
pmu_1 = predict(model_1, re.form=NA, transform = TRUE, newdata=newd_1)
newd_2 = data.frame(maternal_trees=(rep(c(25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),9), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 3)))
#Predictions
pmu_2 = predict(model_2, re.form=NA, transform = TRUE, newdata=newd_2)
#Creating a dataframe to plot in ggplot
preds_1 <- cbind(newd_1, pmu_1)
colnames(preds_1) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds_2 <- cbind(newd_2, pmu_2)
preds = rbind(preds_1, preds_2)
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#E69F00", "#56B4E9", "#CC79A7")
#defining more descriptive labels for the facets
mat_tree_labs = c("1 maternal tree", "2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees")
names(mat_tree_labs) = c("1", "2", "5", "10", "25", "50", "100")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds*2), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees), labeller = labeller(maternal_trees = mat_tree_labs)) +
geom_line(data=preds, mapping = aes(x=(total_seeds*2), y=pmu, lty=donor_type), show.legend=F) +
ggtitle("Genetic diversity capture across all ideal sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "Single", "Skewed")) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
labs(color = "Donor Type")
#Load in data
load("Rdata/tidy_df_ideal.Rdata")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
#Subset the data by maternal tree to run two separate models
sub_1 = tidy_df %>% subset(maternal_trees < 25)
sub_2 = tidy_df %>% subset(maternal_trees >= 25)
#Running the models
model_1 = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = sub_1)
#Save the model since it takes so long to run
#save(transformed_model, file = "transformed_model.Rdata")
#Load the model from previously saved run
#load("transformed_model.Rdata")
#Model summary!
#summary(transformed_model, digits = 4)
```
model_2 = lm(prop_capt ~ total_seeds * maternal_trees * donor_type, data = sub_2)
#Creating a new dataframe of values to base predictions on
newd_1 = data.frame(maternal_trees=(rep(c(1,2,5,10), each=1500)), total_seeds=rep(seq(1,500,1),12), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 4)))
#Predictions
pmu_1 = predict(model_1, re.form=NA, transform = TRUE, newdata=newd_1)
newd_2 = data.frame(maternal_trees=(rep(c(25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),9), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 3)))
#Predictions
pmu_2 = predict(model_2, re.form=NA, transform = TRUE, newdata=newd_2)
#Creating a dataframe to plot in ggplot
preds_1 <- cbind(newd_1, pmu_1)
colnames(preds_1) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds_2 <- cbind(newd_2, pmu_2)
colnames(preds_2) = c("maternal_trees", "total_seeds", "donor_type", "pmu")
preds = rbind(preds_1, preds_2)
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#E69F00", "#56B4E9", "#CC79A7")
#defining more descriptive labels for the facets
mat_tree_labs = c("1 maternal tree", "2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees")
names(mat_tree_labs) = c("1", "2", "5", "10", "25", "50", "100")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds*2), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees), labeller = labeller(maternal_trees = mat_tree_labs)) +
geom_line(data=preds, mapping = aes(x=(total_seeds*2), y=pmu, lty=donor_type), show.legend=F) +
ggtitle("Genetic diversity capture across all ideal sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "Single", "Skewed")) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
labs(color = "Donor Type")
