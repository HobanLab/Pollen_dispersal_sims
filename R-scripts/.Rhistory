##################################################################################
#Library functions
library(adegenet)
library(diveRsity)
library(poppr)
library(tidyr)
library(dplyr)
#including R-script containing functions used for import, conversions, and sampling
source("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts/import_seed_functions.R")
#including edited arp2gen function
source("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts/arp2gen_edit.R")
#defining the working directory containing simulation files
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500"
setwd(mydir)
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#importing and converting genepop files to genalex
import_gen2genalex_files(mydir, ".gen$")
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
load("combined_list_params.Rdata") #loading in function parameters defined in defining_function_parameters.R script
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
load("combined_list_params.Rdata") #loading in function parameters defined in defining_function_parameters.R script
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#creating a container to store the results of sampling and other important data
# four columns to save the proportion of alleles captured, number of seeds sampled,
#number of trees sampled, and number of pollen donors (4 cols)
#each row indicates the scenario (465)
#the third dimension is the simulation replicate (10)
#saving each of the pollen donor scenarios in different arrays--we can combine them later if we need to!
#this is just easier because it's less filtering and more organized
prop_capt_all_same = array(dim=c(465,5,10))
prop_capt_all_eligible = array(dim=c(465,5,10))
prop_capt_skewed = array(dim=c(465,5,10))
#creating a container to store the results of sampling and other important data
# five columns to save the proportion of alleles captured, number of seeds sampled,
#number of trees sampled, and number of pollen donors, and the donor type (5 cols)
#each row indicates the scenario (465)
#the third dimension is the simulation replicate (10)
#saving each of the pollen donor scenarios in different arrays--we can combine them later if we need to!
#this is just easier because it's less filtering and more organized
prop_capt_all_same = array(dim=c(465,5,1000))
prop_capt_all_eligible = array(dim=c(465,5,1000))
prop_capt_skewed = array(dim=c(465,5,1000))
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
#Main loop overview:
#for every simulation replicate, process data to be usable for the function
#then, we have three separate loops, that loop over the parameters created in defining_function_parameters.R
#there are three separate loops for the three pollen donor scnearios (skewed, all eligble, and all same)
#calculate proportion of alleles captured by
#finally, save results (prop. alleles capt, number seeds sampled, number trees sampled, and number pollen donors)
for(i in 1:length(genalex_list)) {
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#All same pollen scenarios
#for each element in scenario list--for 'all same' sampling (defined in defining_function_parameters.R file)
for(x in 1:length(all_same_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct)) #counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured = captured/total, save these results
prop_capt_all_same[x,2,i] = ((all_same_params[[x]][[1]])*(all_same_params[[x]][[2]][[1]]))#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,4,i] = (all_same_params[[x]][[3]]) #number of pollen donors
prop_capt_all_same[x,5,i] = "all_same"
}
#'all eligible' sampling
for(x in 1:length(all_eligible_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct))#counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_eligible[x,1,i] = (captured/total) #proportion of alleles captured= captured/total
prop_capt_all_eligible[x,2,i] = ((all_eligible_params[[x]][[1]])*(all_eligible_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_all_eligible[x,3,i] = (all_eligible_params[[x]][[1]]) #number of trees sampled
prop_capt_all_eligible[x,4,i] = (all_eligible_params[[x]][[3]]) #number of pollen donors
prop_capt_all_eligible[x,5,i] = "all_eligible"
}
#skewed sampling
for(x in 1:length(skewed_params)) {
temp = sample_seed(data, skewed_params[[x]][[1]], skewed_params[[x]][[2]], skewed_params[[x]][[3]], skewed_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_skewed[x,1,i] = (captured/total)#proportion of alleles captured = captured/ total
prop_capt_skewed[x,2,i] = ((skewed_params[[x]][[1]])*(skewed_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_skewed[x,3,i] = (skewed_params[[x]][[1]]) #number of trees sampled
prop_capt_skewed[x,4,i] = (skewed_params[[x]][[3]]) #number of pollen donors
prop_capt_skewed[x,5,i] = "skewed"
}
}
#defining the working directory containing simulation files
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500"
mydir
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
#Main loop overview:
#for every simulation replicate, process data to be usable for the function
#then, we have three separate loops, that loop over the parameters created in defining_function_parameters.R
#there are three separate loops for the three pollen donor scnearios (skewed, all eligble, and all same)
#calculate proportion of alleles captured by
#finally, save results (prop. alleles capt, number seeds sampled, number trees sampled, and number pollen donors)
for(i in 1:length(genalex_list)) {
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#All same pollen scenarios
#for each element in scenario list--for 'all same' sampling (defined in defining_function_parameters.R file)
for(x in 1:length(all_same_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct)) #counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured = captured/total, save these results
prop_capt_all_same[x,2,i] = ((all_same_params[[x]][[1]])*(all_same_params[[x]][[2]][[1]]))#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,4,i] = (all_same_params[[x]][[3]]) #number of pollen donors
prop_capt_all_same[x,5,i] = "all_same"
}
#'all eligible' sampling
for(x in 1:length(all_eligible_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct))#counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_eligible[x,1,i] = (captured/total) #proportion of alleles captured= captured/total
prop_capt_all_eligible[x,2,i] = ((all_eligible_params[[x]][[1]])*(all_eligible_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_all_eligible[x,3,i] = (all_eligible_params[[x]][[1]]) #number of trees sampled
prop_capt_all_eligible[x,4,i] = (all_eligible_params[[x]][[3]]) #number of pollen donors
prop_capt_all_eligible[x,5,i] = "all_eligible"
}
#skewed sampling
for(x in 1:length(skewed_params)) {
temp = sample_seed(data, skewed_params[[x]][[1]], skewed_params[[x]][[2]], skewed_params[[x]][[3]], skewed_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_skewed[x,1,i] = (captured/total)#proportion of alleles captured = captured/ total
prop_capt_skewed[x,2,i] = ((skewed_params[[x]][[1]])*(skewed_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_skewed[x,3,i] = (skewed_params[[x]][[1]]) #number of trees sampled
prop_capt_skewed[x,4,i] = (skewed_params[[x]][[3]]) #number of pollen donors
prop_capt_skewed[x,5,i] = "skewed"
}
}
genalex_list
i=1
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
mydir
#defining the working directory containing simulation files
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500"
setwd(mydir)
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
setwd(mydir)
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#Main loop overview:
#for every simulation replicate, process data to be usable for the function
#then, we have three separate loops, that loop over the parameters created in defining_function_parameters.R
#there are three separate loops for the three pollen donor scnearios (skewed, all eligble, and all same)
#calculate proportion of alleles captured by
#finally, save results (prop. alleles capt, number seeds sampled, number trees sampled, and number pollen donors)
for(i in 1:length(genalex_list)) {
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#All same pollen scenarios
#for each element in scenario list--for 'all same' sampling (defined in defining_function_parameters.R file)
for(x in 1:length(all_same_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct)) #counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured = captured/total, save these results
prop_capt_all_same[x,2,i] = ((all_same_params[[x]][[1]])*(all_same_params[[x]][[2]][[1]]))#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,4,i] = (all_same_params[[x]][[3]]) #number of pollen donors
prop_capt_all_same[x,5,i] = "all_same"
}
#'all eligible' sampling
for(x in 1:length(all_eligible_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct))#counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_eligible[x,1,i] = (captured/total) #proportion of alleles captured= captured/total
prop_capt_all_eligible[x,2,i] = ((all_eligible_params[[x]][[1]])*(all_eligible_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_all_eligible[x,3,i] = (all_eligible_params[[x]][[1]]) #number of trees sampled
prop_capt_all_eligible[x,4,i] = (all_eligible_params[[x]][[3]]) #number of pollen donors
prop_capt_all_eligible[x,5,i] = "all_eligible"
}
#skewed sampling
for(x in 1:length(skewed_params)) {
temp = sample_seed(data, skewed_params[[x]][[1]], skewed_params[[x]][[2]], skewed_params[[x]][[3]], skewed_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_skewed[x,1,i] = (captured/total)#proportion of alleles captured = captured/ total
prop_capt_skewed[x,2,i] = ((skewed_params[[x]][[1]])*(skewed_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_skewed[x,3,i] = (skewed_params[[x]][[1]]) #number of trees sampled
prop_capt_skewed[x,4,i] = (skewed_params[[x]][[3]]) #number of pollen donors
prop_capt_skewed[x,5,i] = "skewed"
}
}
tail(prop_capt_all_eligible)
tail(prop_capt_all_eligible[,,1000])
tail(prop_capt_all_eligible[,,900])
tail(prop_capt_all_eligible[,,800])
tail(prop_capt_all_eligible[,,700])
tail(prop_capt_all_eligible[,,600])
colnames(prop_capt_all_same) = c("prop_capt", "total_seeds", "maternal_trees", "num_donors", "donor_type")
colnames(prop_capt_all_eligible) = c("prop_capt", "total_seeds", "maternal_trees", "num_donors", "donor_type")
colnames(prop_capt_skewed) = c("prop_capt", "total_seeds", "maternal_trees", "num_donors", "donor_type")
#saving results to Rdata file
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
save(prop_capt_all_same, prop_capt_all_eligible, prop_capt_skewed, file="prop_alleles_capt.Rdata")
#load in results from main_loop.R
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
load("prop_alleles_capt.Rdata")
#libraries
library(dplyr)
library(tidyr)
library(ggplot2)
prop_capt_all_same[,,1]
tail(prop_capt_all_eligible[,,600])
rowMeans(prop_capt_all_same, dims=500)
rowMeans(prop_capt_all_same, dims=2)
prop_capt_all_same[,5,]
prop_capt_all_same[,5,]=1
prop_capt_all_same[,5,]
prop_capt_all_eligible[,5,]=2
prop_capt_all_eligible[,5,]
prop_capt_skewed[,5,]=3
rowMeans(prop_capt_all_same, dims=2)
apply(prop_capt_all_same, 1:500, mean)
rowMeans(prop_capt_all_same, dims=2)
as.numeric(prop_capt_all_same)
rowMeans(prop_capt_all_same, dims=2)
#load in results from main_loop.R
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
load("prop_alleles_capt.Rdata")
rowMeans(prop_capt_all_same, dims = 1:500)
str(prop_capt_all_same)
prop_capt_all_same = lapply(prop_capt_all_same, as.numeric)
View(prop_capt_all_same)
#load in results from main_loop.R
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
load("prop_alleles_capt.Rdata")
prop_capt_all_same
prop_capt_all_same[,5,] = 1
head(prop_capt_all_same)
prop_capt_all_eligible[,5,] = 2
prop_capt_skewed[,5,] = 3
as.numeric(prop_capt_all_same)
x = as.numeric(prop_capt_all_same)
View(x)
head(x)
View(prop_capt_all_same)
prop_capt_all_same
rowMeans(prop_capt_all_same, dim = 1:500)
#load in results from main_loop.R
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
load("prop_alleles_capt.Rdata")
#libraries
library(dplyr)
library(tidyr)
library(ggplot2)
mean(prop_capt_all_same[1,1,])
prop_capt_all_same[1,1]
prop_capt_all_same[1,1,]
mean(as.numeric(prop_capt_all_same[1,1,]))
as.numeric(prop_capt_all_same[1,1,])
x = as.numeric(prop_capt_all_same)
x
x = as.numeric(prop_capt_all_same)
x = as.numeric(prop_capt_all_same[1,1,])
x
mean(x, na.rm = TRUE)
mean(as.numeric(prop_capt_all_same[i,1,]))
i=1
r
mean(as.numeric(prop_capt_all_same[i,1,]))
prop_capt_all_same[i,1,]
mean(as.numeric(prop_capt_all_same[i,1,]))
temp = as.numeric(prop_capt_all_same[i,1,])
mean(as.numeric(prop_capt_all_same[i,1,]), na.rm = TRUE)
#arrays to save averaged results
prop_capt__all_same_avg = array(dim=c(465,5))
prop_capt_all_eligible_avg = array(dim=c(465,5))
prop_capt_skewed_avg = array(dim=c(465,5))
#arrays to save averaged results
prop_capt_all_same_avg = array(dim=c(465,5))
#arrays to save averaged results
prop_capt_all_same_avg = array(dim=c(465,5))
prop_capt_all_eligible_avg = array(dim=c(465,5))
prop_capt_skewed_avg = array(dim=c(465,5))
colnames(prop_capt_all_same_avg) = c("prop_capt", "total_seeds", "maternal_trees", "num_donors", "donor_type")
colnames(prop_capt_all_eligible_avg) = c("prop_capt", "total_seeds", "maternal_trees", "num_donors", "donor_type")
colnames(prop_capt_skewed_avg) = c("prop_capt", "total_seeds", "maternal_trees", "num_donors", "donor_type")
view(prop_capt_all_same_avg)
View(prop_capt_all_same_avg)
#saving results
prop_capt_all_same_avg[i,1] = prop_capt_all_same[i,1,1]
#saving results
prop_capt_all_same_avg[i,1] = prop_capt_all_same[i,,1]
#saving results
prop_capt_all_same_avg[i,] = prop_capt_all_same[i,,1]
avg_prop_all_capt = mean(as.numeric(prop_capt_all_same[i,1,]), na.rm = TRUE) #calculates the means of all replicates for one scenario
prop_capt_all_same_avg[i,1] = avg_prop_all_capt
#looping over each scenario (row = 465) to get the average prop. alleles captured in each replicate (slice = 500)
#and for each donor type (why the code is repeated 3x)
for(i in 1:465) {
#ALL SAME
avg_prop_all_capt = mean(as.numeric(prop_capt_all_same[i,1,]), na.rm = TRUE) #calculates the means of all replicates for one scenario
#saving results
prop_capt_all_same_avg[i,] = prop_capt_all_same[i,,1] #copying over data from previous array
prop_capt_all_same_avg[i,1] = avg_prop_all_capt
#ALL ELIGIBLE
avg_prop_all_capt = mean(as.numeric(prop_capt_all_eligible[i,1,]), na.rm = TRUE) #calculates the means of all replicates for one scenario
#saving results
prop_capt_all_eligible_avg[i,] = prop_capt_all_eligible[i,,1] #copying over data from previous array
prop_capt_all_eligible_avg[i,1] = avg_prop_all_capt
#SKEWED
avg_prop_all_capt = mean(as.numeric(prop_capt_skewed[i,1,]), na.rm = TRUE) #calculates the means of all replicates for one scenario
#saving results
prop_capt_skewed_avg[i,] = prop_capt_skewed[i,,1] #copying over data from previous array
prop_capt_skewed_avg[i,1] = avg_prop_all_capt
}
prop_capt_all_same_avg
#Preparing data for plotting
#combining each of the separate arrays into one large array (just one replicate)
combined_data = rbind(prop_capt_all_same_avg, prop_capt_all_eligible_avg, prop_capt_skewed_avg)
combined_data = as.data.frame(combined_data) #converting array to dataframe to use in ggplot
View(combined_data)
#filtering the data--looking at 10 maternal trees only
#when we try to plot all numbers of maternal trees on one plot, it gets too busy
#we need to have some constants
filtered = combined_data %>% filter(maternal_trees == 10)
ggplot(data=filtered, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), group=donor_type, color=donor_type)) +
geom_line() +
xlab("Total seeds sampled") +
ylab("Proportion of alleles captured") +
ggtitle("Diversity captured from sampling 10 maternal trees")
#looking at 50 maternal trees
filtered = combined_data %>% filter(maternal_trees == 50)
ggplot(data=filtered, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), group=donor_type, color=donor_type)) +
geom_line() +
xlab("Total seeds sampled") +
ylab("Proportion of alleles captured") +
ggtitle("Diversity captured from sampling 50 maternal trees")
filtered = combined_data %>% filter(maternal_trees == 1)
ggplot(data=filtered, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), group=donor_type, color=donor_type)) +
geom_line() +
geom_smooth() +
xlab("Total seeds sampled") +
ylab("Proportion of alleles captured") +
ggtitle("Diversity captured from sampling 1 maternal trees")
ggplot(data=filtered, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), group=donor_type, color=donor_type)) +
geom_line() +
xlab("Total seeds sampled") +
ylab("Proportion of alleles captured") +
ggtitle("Diversity captured from sampling 1 maternal trees")
#first, looking at a total size of 100 seeds
filtered = combined_data %>% filter(total_seeds == 100)
ggplot(data=filtered, aes(x=as.numeric(maternal_trees), y=as.numeric(prop_capt), group=donor_type, color=donor_type)) +
geom_line() +
xlab("Number of maternal trees sampled") +
ylab("Proportion of alleles captured") +
ggtitle("Diversity captured from sampling 100 total seeds from varying maternal trees")
#next looking at 200 seeds
filtered = combined_data %>% filter(total_seeds == 200)
ggplot(data=filtered, aes(x=as.numeric(maternal_trees), y=as.numeric(prop_capt), group=donor_type, color=donor_type)) +
geom_line() +
xlab("Number of maternal trees sampled") +
ylab("Proportion of alleles captured") +
ggtitle("Diversity captured from sampling 200 total seeds from varying maternal trees")
#next looking at 50 seeds
filtered = combined_data %>% filter(total_seeds == 50)
ggplot(data=filtered, aes(x=as.numeric(maternal_trees), y=as.numeric(prop_capt), group=donor_type, color=donor_type)) +
geom_line() +
xlab("Number of maternal trees sampled") +
ylab("Proportion of alleles captured") +
ggtitle("Diversity captured from sampling 50 total seeds from varying maternal trees")
###########################################################
#comparing equivalent scenarios
filtered = prop_capt_all_same %>% filter(maternal_trees==25 && total_seeds==125)
###########################################################
#comparing equivalent scenarios
as.data.frame(prop_capt_all_same)
filtered = prop_capt_all_same %>% filter(maternal_trees==25 && total_seeds==125)
###########################################################
#comparing equivalent scenarios
z = as.data.frame(prop_capt_all_same)
filtered = z %>% filter(maternal_trees==25 && total_seeds==125)
View(z)
#load in results from main_loop.R
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
load("prop_alleles_capt.Rdata")
###########################################################
#comparing equivalent scenarios
z = as.data.frame(prop_capt_all_same)
filtered = z %>% filter(maternal_trees==25 && total_seeds==125)
View(z)
###########################################################
#comparing equivalent scenarios
filtered = prop_capt_all_same %>% filter(maternal_trees==25 && total_seeds==125)
View(prop_capt_all_same)
#load in results from main_loop.R
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
load("prop_alleles_capt.Rdata")
View(prop_capt_all_same)
