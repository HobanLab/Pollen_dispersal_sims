vlen
land$intparam$stages
4*6
vec
length(vec)
landscape.new.individuals()
land <- landscape.new.individuals(land, vec)
land <- landscape.new.individuals(land, c(rep(24,100)))
land <- landscape.new.individuals(land, c(rep(100,24)))
vlen <- ((land$intparam$habitats)*(land$intparam$stages)) #vector length is number habitat*number local stages
vec <- rep(100, vlen)
land <- landscape.new.individuals(land, vec)
land = landscape.new.locus(land, type = 1, ploidy = 2, transmission = 0, numalleles = 3, allelesize = 125) #diploid biparental allele, finite sequence model, 3 alleles of 125 bases
length(land$loci)
remove(land$loci)
rm(land$loci)
library(quantsel)
library(quantsel)
#create empty landscape
land = landscape.new.empty()
#defining integer parameters-- 2 habitats and 2 demographic stages
land = landscape.new.intparam(land, h=2, s=2)
#defining values for float params as default
land = landscape.new.floatparam(land)
#defining switch params as default
land = landscape.new.switchparam(land)
#defining matrices for the landscape object
S <- matrix(c(0.5, 0.5, 0.5, 0.5), byrow = T, nrow = 2)
R <- matrix(c(14, 8.5, 14, 8.5), byrow = T, nrow = 2)
M <- matrix(c(0.5, 0, 0.5, 0), byrow = T, nrow = 2)
#assigning values to the landscape object
land = landscape.new.local.demo(land, S, R, M)
#epochs
#defining empty matrix
zeromat <- matrix(0, nrow = 2 * 2, ncol = 2 * 2)
#defining yearly extinction rate in each habitat (4 habitats)
extnct <- c(0, 0.1)
#defining yearly extinction rate in each habitat (2 habitats)
extnct <- c(0, 0.1)
#defining carrying capacity of each habitat (2 habitats)
k <- c(100,200)
ldem <- c(0.5, 0.5)
#defining seed dispersal kernel matrix
sk <- matrix(0, nrow = 2 * 2, ncol = 2)
sk[, 1] <- rep(3, 2*2) #column is the seed dispersal kernel
sk[, 2] <- rep(10, 2*2) #this column is the scale component ? for kernel component 1
sk[, 3] <- rep(1.1, 2*2) #shape parameter for kernel component 1
sk[, 4] <- rep(100, 2*2)#scale component for kernel component 2
sk[, 5] <- rep(50, 2*2) #shape param for kernel component 2
sk[, 6] <- rep(0.5, 2*2) #mixing parameter--range 0 to 1. if 1, dispersal is determined by kernel 1
#defining seed dispersal kernel matrix
sk <- matrix(0, nrow = 2 * 2, ncol = 2)
sk[, 1] <- rep(3, 2*2) #column is the seed dispersal kernel
sk[, 2] <- rep(10, 2*2) #this column is the scale component ? for kernel component 1
sk[, 3] <- rep(1.1, 2*2) #shape parameter for kernel component 1
#defining seed dispersal kernel matrix
sk <- matrix(0, nrow = 2 * 2, ncol = 2)
sk[, 1] <- rep(3, 2*2) #column is the seed dispersal kernel
sk[, 2] <- rep(1, 2*2) #this column is the scale component ? for kernel component 1
sk[, 3] <- rep(1, 2*2) #shape parameter for kernel component 1
land = landscape.new.epoch(land, S = zeromat, R = zeromat, M = zeromat,
extinct = extnct, carry = k, localprob = ldem,)
land$demography$epochs
land = landscape.new.locus(land, type = 1, ploidy = 2, transmission = 0, numalleles = 3) #diploid biparental inherited allele, stepwise mutation model, 3 alleles
land = landscape.new.locus(land, type = 1, ploidy = 2, transmission = 0, numalleles = 3)
land = landscape.new.individuals(land, c(10,5,15,25))
land = landscape.new.individuals(land, c(10,5,15,25))
inds = matrix(c(10,5,15,25), byrow = T, nrow = 2)
inds = matrix(c(10,5,15,25), byrow = T, nrow = 2)
land = landscape.new.individuals(land, inds)
inds = c(10,5,15,25)
land = landscape.new.individuals(land, inds)
inds = c(10,10,10,10)
land = landscape.new.individuals(land, inds)
vlen <- ((land$intparam$habitats)*(land$intparam$stages)) #vector length is number habitat*number local stages
vec <- rep(100, vlen)
land <- landscape.new.individuals(land, vec)
vec <- rep(10, vlen)
land <- landscape.new.individuals(land, vec)
setwd("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations")
setwd("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population")
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
import_arp2gen_files(paste(mydir,sep=""),".arp$")
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
#FLAGS
#file conversion flag
#set to true once files have been converted once
#false if you want to convert files
conversion_flag = FALSE
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
import_arp2gen_files(paste(mydir,sep=""),".arp$")
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
import_arp2gen_files(paste(mydir,sep=""),".arp$")
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
import_arp2gen_files(paste(mydir,sep=""),".arp$")
mypath = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
mypattern = ".arp$"
temp_list_1 = list.files(mypath, mypattern)
temp_list_1
temp_list_2 = list(length = length(temp_list_1))
temp_list_2
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
import_arp2gen_files(paste(mydir,sep=""),".arp$")
import_arp2gen_files(mydir,".arp$")
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
import_arp2gen_files(mydir,".arp$")
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
import_arp2gen_files(mydir,".arp$")
#Defining arrays to hold seed information
seed_array = array(dim = c(100,100))
seed_array
#Defining arrays to hold seed information
#holds info for 100 mothers (rows) and 100 seeds per mother (columns)
seed_array = array(dim = c(100,100))
#Converting genepop files to genind objects
list_files = list.files(paste(mydir, pattern = ".gen$")
#Converting genepop files to genind objects
list_files = list.files(paste(mydir, pattern = ".gen$"))
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
list_files
#Converting genepop files to genind objects
list_files = list.files(paste(mydir, pattern = ".gen$"))
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[1]], ncode=3)
list_files
#Converting genepop files to genind objects
list_files = list.files(paste(mydir, ".gen$"))
list_Files
list_files
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#Defining an import function
#converts all arlequin simulation files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
#importing and converting files
import_arp2gen_files(mydir,".arp$")
#Converting genepop files to genind objects
list_files = list.files(paste(mydir, ".gen$"))
list_files
#Converting genepop files to genind objects
list_files = list.files(paste(mydir, ".gen$"))
list_files
list_files[[1]]
list_files[1]
#Converting genepop files to genind objects
genepop_files = list.files(paste(mydir, ".gen$"))
#Converting genepop files to genind objects
genepop_files = list.files(mydir, ".gen$")
genepop_files
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[1]], ncode=3)
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(genepop_files[[1]], ncode=3)
#Converting genepop files to genind objects
genepop_files = list.files(mydir, ".gen$")
genind_list = list()
#creating a temporary genind object (using Adegenet package) for each simulation replicate
for(i in 1:length(genepop_files)) {
genind_list[[i]] = read.genepop(genepop_files[[i]], ncode=3)
}
genind_list
genind_list[[1]]
#Defining arrays to hold seed information
#holds info for 100 mothers (rows) and 100 seeds per mother (columns)
seed_array = array(dim = c(50,100))
seed_array
#Defining arrays to hold seed information
#holds info for 50 mothers (rows) and 100 seeds per mother (columns)
seed_array = array(dim = c(50,100))
#Defining functions to assign mothers in a population
define_mother_scen_1 = function(num_mothers, genind_object) {
}
genind_list[1]
genind_list[1]@tab
genind_list[1]@tab[1]
genind_list[[1]]@tab[1]
genind_list[[1]]@tab[2]
genind_list[[1]]@tab[2,]
##################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#Defining an import function
#converts all arlequin simulation files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
#importing and converting files
import_arp2gen_files(mydir,".arp$")
#Converting genepop files to genind objects
genepop_files = list.files(mydir, ".gen$")
genind_list = list()
#creating a list of genind objects (using Adegenet package) for each simulation replicate
for(i in 1:length(genepop_files)) {
genind_list[[i]] = read.genepop(genepop_files[[i]], ncode=3)
}
#Defining arrays to hold seed information
#holds info for 50 mothers (rows) and 100 seeds per mother (columns)
seed_array = array(dim = c(50,100))
genind_list[[1]]
genind_list[[1]]@tab
genind_list[[1]]@tab[1]
genind_list[[1]]@tab[1,]
genind_list[[1]]@tab[1,]$alleles
genind_list[[1]]@tab[1,]@alleles
genind_list[[1]]@tab[1]
genind_list[[1]]@tab[2]
genind_list[[1]]@tab[3]
genind_list[[1]]@tab[4]
genind_list[[1]]@tab[5]
genind_list[[1]]@tab[5,]
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#Defining an import function
#converts all arlequin simulation files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
#importing and converting files
import_arp2gen_files(mydir,".arp$")
#Converting genepop files to genind objects
genepop_files = list.files(mydir, ".gen$")
genind_list = list()
#Converting genepop files to genind objects
genepop_files = list.files(mydir, ".gen$")
genind_list = list()
genepop_files = list.files(mydir, ".gen$")
#creating a list of genind objects (using Adegenet package) for each simulation replicate
for(i in 1:length(genepop_files)) {
genind_list[[i]] = read.genepop(genepop_files[[i]], ncode=3)
}
#Defining arrays to hold seed information
#holds info for 50 mothers (rows) and 100 seeds per mother (columns)
seed_array = array(dim = c(50,100))
genind_list[[1]]
genind_list[[1]]@tab
plot(6)
mother_list[i] = genind_list[[1]]@tab[1:50,]
#Defining arrays to hold seed information
#holds info for 50 mothers (rows) and 100 seeds per mother (columns)
seed_array = array(dim = c(50,100))
#defining list of mothers
mother_list = list()
#defining list of fathers
father_list = list()
genind_list
genind_list[[1]]@tab[1:50,]
genind_list[[1]]@tab[50:100,]
#Defining functions to assign mothers in a population
define_mother_scen_1 = function(num_mothers, genind_object) {
for(i in 1:50) {
mother_list[[i]] = genind_list[[1]]@tab[i,]
}
}
#defining functions to assign fathers in a population
define_father_scen_1 = function(num_fathers, genind_object) {
for(i in 50:100) {
father_list[[i]] = genind_list[[1]]@tab[i,]
}
}
father_list[[1]]
mother_list[[1]]
mother_list[1]
i
genind_list[[1]]@tab
genind_list[[1]]@tab[1,]
#defining mothers
for(i in 1:50) {
mother_list[[i]] = genind_list[[1]]@tab[i,]
}
mother_list[[1]]
#defining fathers
for(i in 50:100) {
father_list[[i]] = genind_list[[1]]@tab[i,]
}
father_list[[1]]
#defining fathers
for(i in 1:50) {
father_list[[i]] = genind_list[[1+50]]@tab[i,]
}
#defining fathers
for(i in 1:50) {
father_list[[i]] = genind_list[[(1+50)]]@tab[i,]
}
#defining fathers
for(i in 1:50) {
father_list[[i]] = genind_list[[i+50]]@tab[i,]
}
i
i+50
#defining fathers
for(i in 1:50) {
father_list[[i]] = genind_list[[(i+50)]]@tab[i,]
}
#defining mothers and fathers
for(i in 1:50) {
if(i < 51) {
mother_list[[i]] = genind_list[[i]]@tab[i,]
} else {
father_list[[i]] = genind_list[[i]]@tab[i,]
}
}
i
#defining mothers and fathers
for(i in 1:50) {
if(i < 51) {
mother_list[[i]] = genind_list[[1]]@tab[i,]
} else {
father_list[[i]] = genind_list[[1]]@tab[i,]
}
}
father_list[i]
father_list[1]
#defining mothers and fathers
for(i in 1:50) {
mother_list[[i]] = genind_list[[1]]@tab[i,]
}
mother_list[[1]]
#defining fathers
for(i in 1:50) {
father_list[[i]] = genind_list[[1]]@tab[i+50,]
}
father_list[[1]]
mother_list[[1]]@allele
mother_list[[1]]@locus
mother_list[[1]]@alleles
mother_list[[1]][1]
mother_list[[1]][2]
mother_list[[1]]
mother_list[[1]]>0
allele = mother_list[[1]] > 0
allele
allele = mother_list[[1]]$col > 0
mother_list[[1]]
allele = list()
if(mother_list[[1]]>0) {}
if(mother_list[[1]][1]>0) {allele = mother_list[[1]][1]}
allele
#Defining function to create sets of seed on a mother tree
m_allele = list()
f_allele = list()
for(x in 1:5) {
if(mother_list[[i]][x])>0) {
m_allele = mother_list[[i]][x]
}
}
for(x in 1:5) {
if(mother_list[[i]][x]>0) {
m_allele = mother_list[[i]][x]
}
}
m_allele
mother_list[[1]]
mother_list[[1]]@allele
genind_list[[1]]@tab@allele
genind_list[[1]]@allele
genind_list[[1]]@alleles
genind_list[[1]]@atab
genind_list[[1]]@tab
