##################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#defining an array to store seeds on mother trees
potential_seeds = array(c(100,100))
#make a list of genind objects here for each simulation replicate
#################################################################################
#number of trees collectors will sample seed from
n = 10
#number of seeds collectors will sample from each tree
m = 10
#number of trees collectors will sample seed from
n = 10
#number of seeds collectors will sample from each tree
m = 10
#defining an array to store seeds on mother trees
all_seeds = array(c(100,100)) #size = size of mothers x number of seeds they carry (simplified)
#array to store seeds that have been collected
collected_seeds = array(c(n,m)) #size = number of trees sampled x number of seeds sampled per tree
#defining a pollen probability vector
pollen_donor_probability = vector(length = num_fathers)
#number of pollen donors
num_fathers = 1
#defining a pollen probability vector
pollen_donor_probability = vector(length = num_fathers)
#defining a pollen probability vector
pollen_donor_probability = vector(length = num_fathers)
pollen_donor_probability[1] = 1
pollen_donor_probability
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
#make a list of genind objects here for each simulation replicate
genetic_data = read.genepop("example_population_0.gen", ncode=3)
genetic_data
#make a list of genind objects here for each simulation replicate
population_genetic_data = read.genepop("example_population_0.gen", ncode=3)
#rows to sample
#defining which rows or 'individuals' to sample from in the genind object
#(rows correspond to individuals)
rows_to_sample = n
#just using one simulation replicate for now..
population_genetic_data = read.genepop("example_population_0.gen", ncode=3)
#how many trees in entire population - required to build all seed set (potential trees to sample from)
total_trees = 100
#defining an array to store seeds on mother trees
all_seeds = array(c(100,100)) #size = size of mothers x number of seeds they carry (simplified)
#number of trees collectors will sample seed from
n = 10
#number of seeds collectors will sample from each tree
m = 10
#array to store seeds that have been collected
collected_seeds = array(c(n,m)) #size = number of trees sampled x number of seeds sampled per tree
#number of pollen donors
#changes depending on the scenario
num_fathers = 1
#defining a pollen probability vector
#changes depending on the scenario
pollenation_probability = vector(length = num_fathers)
pollenation_probability[1] = 1
#rows to sample
#defining which rows or 'individuals' to sample from in the genind object
#(rows correspond to individuals)
rows_to_sample = n
build_seed = function(num_mothers, num_fathers, pollen_probability_vector, num_seeds) {
for(i in 1:num_mothers) {
rows_to_sample = sample(total_trees, 1) #sample from the entire dataset, 1 mother (repeat n times for n number mothers)
}
}
rows_to_sample
rows_to_sample = sample(total_trees, 1) #sample from the entire dataset, 1 mother (repeat n times for n number mothers)
rows_to_sample = sample(total_trees, 1) #sample from the entire dataset, 1 mother (repeat n times for n number mothers)
rows_to_sample
rows_to_sample = sample(total_trees, 1) #sample from the entire dataset, 1 mother (repeat n times for n number mothers)
rows_to_sample
#rows to sample
#defining which rows or 'individuals' to sample from in the genind object
#(rows correspond to individuals)
rows_to_sample_mothers = n
rows_to_sample_mothers = sample(total_trees, 1) #sample from the entire dataset, 1 mother (repeat n times for n number mothers)
rows_to_sample_fathers = num_fathers
build_seed = function(num_mothers, num_fathers, pollen_probability_vector, num_seeds) {
for(i in 1:num_mothers) {
rows_to_sample_mothers = sample(total_trees, 1) #sample from the entire dataset, 1 mother (repeat n times for n number mothers)
for(j in 1:num_fathers) {
rows_to_sample_fathers = sample(total_trees, num_fathers)
}
}
}
rows_to_sample_fathers
rows_to_sample_fathers
rows_to_sample_fathers = sample(total_trees, num_fathers)
rows_to_sample_fathers
rows_to_sample_mothers
rows_to_sample_mothers = sample(total_trees, 1) #sample from the entire dataset, 1 mother (repeat n times for n number mothers)
rows_to_sample_mothers
population_genetic_data@tab
population_genetic_data@tab[69]
population_genetic_data@tab[[69]
population_genetic_data@tab[[69]]
population_genetic_data@tab[[69]]
population_genetic_data@tab[69]
population_genetic_data@tab[69,]
rows_to_sample_mothers
population_genetic_data[69,]
population_genetic_data@tab[69,]
population_genetic_data@tab[27,]
sample(population_genetic_data@tab[27,]>0, 1)
sum(sample(population_genetic_data@tab[27,]>0, 1))
sample(population_genetic_data@tab[27,]>0, 1)
sample(population_genetic_data@tab[27,]>0, 1)
sample(population_genetic_data@tab[27,]>0, 1)
sample((population_genetic_data@tab[27,]>0), 1)
sample((population_genetic_data@tab[27,]>0), 1)
sample((population_genetic_data@tab[27,]>0), 1)
sample((population_genetic_data@tab[27,]>0), 1)
sample((population_genetic_data@tab[27,]>0), 1)
sample((population_genetic_data@tab[27,]>0), 1)
population_genetic_data@tab[27,] >0
data_sub = apply(population_genetic_data[27,], 1, function(col), all(col != 0)
data_sub = apply(population_genetic_data[27,], 1, function(col), all(col != 0))
rows_to_sample_fathers = sample(total_trees, num_fathers, prob = pollenation_probability)
pollenation_probability
num_fathers
sum(population_genetic_data@tab[1]>0)
sum(population_genetic_data@tab[1,]>0)
population_genetic_data@tab[1,]
population_genetic_data@tab[1,]>0
sum(population_genetic_data@tab[1,]>0)
population_genetic_data@tab[2,]
population_genetic_data@tab[3,]
population_genetic_data@tab[8,]
population_genetic_data@tab[27,]
sum(population_genetic_data@tab[27,]>0)
temp_seed = list()
temp = population_genetic_data
temp
temp = temp@tab[1,]temp
temp
temp@tab[1,]
temp[temp==0] = NA
temp@tab[1,]
temp@tab[1,][temp@tab[1,]==0] = "NA"
temp@tab[1,]
filtered = temp@tab[1,][complete.cases(temp@tab[1,]),]
filtered = temp@tab[1,][complete.cases(temp@tab[1,])]
filtered
filtered = temp@tab[1,][complete.cases(temp@tab[1,],)]
filtered = temp@tab[1,][complete.cases(temp@tab[1,]),]
temp@tab[1,]
filtered = (temp@tab[1,][complete.cases(temp@tab[1,]),])
data = temp@tab[1,]
data
filtered = data[complete.cases(data),]
filtered = data[complete.cases(data)]
filtered
data[apply(data!=0, 1, all),]
data
temp@tab[1,]
temp@tab[1,][temp@tab[1,]=="NA"] = 0
temp@tab[1,]
data = temp@tab[1,]
data
data2 = filter(data >0)
data2 = filter(data, >0)
data2 = filter(data, ,>0)
data[!apply(data==0, 1, all),]
data[!apply(data==0, 1, all),]
data[apply(data!=0, 1, all),]
temp
temp[apply(temp!=0, 1, all),]
temp@tab[apply(temp@tab!=0, 1, all),]
temp@tab
data = temp@tab[apply(temp@tab>0, 1, all),]
data
data@tab
temp@tab
population_genetic_data
population_genetic_data@tab
temp@tab[1,]
sample(temp@tab[1,]>0, 1)
sample(temp@tab[1,>0], 1)
sample((temp@tab[1,]>0), 1)
sample((temp@tab[1,]>0), 1)
#just using one simulation replicate for now..
gen_data = read.genepop("example_population_0.gen", ncode=3)
p_alleles = sample(gen_data[rows_to_sample_fathers,]>0, 1, prob = pollenation_probability)
m_alleles = sample(gen_data[rows_to_sample_mothers]>0, 1)
#just using one simulation replicate for now..
genind_obj = read.genepop("example_population_0.gen", ncode=3)
gen_data = genind_obj@tab
m_alleles = sample(gen_data[rows_to_sample_mothers], 1)
m_alleles
m_alleles = sample(gen_data[rows_to_sample_mothers,], 1)
m_alleles
p_alleles = sample(gen_data[rows_to_sample_fathers,], 1, prob = pollenation_probability)
p_alleles = sample(gen_data[rows_to_sample_fathers,], 1)
p_alleles
rows_to_sample_fathers
allele = list()
genotype = list()
genotype = m_allele
genotype = m_alleles
gneotype
genotype
genotype[0]
genotype[1]
genotype[2] = p_alleles
p_alleles
genotype
p_alleles
genotype
genotype = p_alleles
genotype
genotype[1] = m_alleles
genotype[2] = p_alleles
genotype
genotype[[1]] = m_alleles
genotye[[2]] = p_alleles
genotype[[2]] = p_alleles
genotype
genotype[[1]]
genotype[[2]]
genotype
genotype
genotype = list()
genotype
genotype = list(m_alleles, p_alleles)
genotype
for(i in 1:num_mothers) { #choosing which individuals to assign as mothers
rows_to_sample_mothers = sample(total_trees, 1) #sample from the entire dataset, 1 mother (repeat n times for n number mothers)
for(j in 1:num_fathers) { #choosing which individuals to assign as fathers, for a given mother (one mother tree can have multiple pollen donors)
rows_to_sample_fathers[j] = sample(total_trees, num_fathers)
}
m_alleles = sample(gen_data[rows_to_sample_mothers,], 1)
p_alleles = sample(gen_data[rows_to_sample_fathers,], 1)
}
for(i in 1:n) { #choosing which individuals to assign as mothers
rows_to_sample_mothers = sample(total_trees, 1) #sample from the entire dataset, 1 mother (repeat n times for n number mothers)
for(j in 1:num_fathers) { #choosing which individuals to assign as fathers, for a given mother (one mother tree can have multiple pollen donors)
rows_to_sample_fathers[j] = sample(total_trees, num_fathers)
}
m_alleles = sample(gen_data[rows_to_sample_mothers,], 1)
p_alleles = sample(gen_data[rows_to_sample_fathers,], 1)
}
#number of trees in population
total_trees = 100
#number of seeds carried by each tree
#a simplification, maybe a place holder?
seeds_per_tree = 100
seed_population = array(dim=c(total_trees, seeds_per_tree))
seed_population
#array to store seeds that collectors have 'sampled'
#dimensions are number of trees sampled from x number of seeds per tree
seeds_sampled = array(dim=c(trees_to_sample, seeds_to_sample))
#number of trees that collectors will sample from
trees_to_sample = 10
#number of seeds collectors will sample on each tree
seeds_to_sample = 10
#array to store seeds that collectors have 'sampled'
#dimensions are number of trees sampled from x number of seeds per tree
seeds_sampled = array(dim=c(trees_to_sample, seeds_to_sample))
#number of trees in population
total_trees = 100
#number of seeds carried by each tree
#a simplification, maybe a place holder?
seeds_per_tree = 100
#array to store the total seed population
#array dimensions are total number of mothers x total number of seeds per tree
seed_population = array(dim=c(total_trees, seeds_per_tree))
#number of trees that collectors will sample from
trees_to_sample = 10
#number of seeds collectors will sample on each tree
seeds_to_sample = 10
#array to store seeds that collectors have 'sampled'
#dimensions are number of trees sampled from x number of seeds per tree
seeds_sampled = array(dim=c(trees_to_sample, seeds_to_sample))
pollen_probability = c(1)
pollen_probability
pollen_probability = c(0.2,0.2,0.6)
pollen_probability
pollen_probability[1]
pollen_probability[2]
pollen_probability[3]
