data
##################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
library(poppr)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\defining_functions.R")
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population_2"
setwd(mydir)
#number of trees in population
total_trees = 100
#number of trees in population that collectors will sample from
trees_to_sample = 10
#number of seeds collectors will sample from each tree
seeds_to_sample = 10
#number of pollen donors per maternal tree
num_pollen_donors = 1 #defined as 1 for simplicity
pollen_probability = c(1) #defined as 1 since there is 1 father per mother
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#number of loci modeled in simulations
#***get rid of this variable - calculated in loop
num_loci = 5
seeds_sampled = matrix(nrow = total_trees, ncol = (2*num_loci))
seeds_sampled = as.data.frame(seeds_sampled)
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
seeds_sampled = matrix(nrow = total_trees, ncol = (2*num_loci))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c(loci_names)
#list of genalex files for all simulation replicates
genalex_list = list.files(mydir, ".csv$")
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- the population data is not required for this
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
View(data)
num_loci = ((ncol(data)-2)/2)
num_loci
num_loci = 0
num_loci
num_loci = ((ncol(data)-2)/2)
num_loci
View(data)
paste("pop", w, sep="")
w=1
paste("pop", w, sep="")
#subset data to for the current population group
temp_data = data[which(data$Pop==paste("pop", w, sep=""))]
#subset data to for the current population group
temp_data = data[which(data$Pop==paste("pop", w, sep="")),]
View(temp_data)
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
seeds_sampled = matrix(nrow = total_trees, ncol = (2*num_loci))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c("Pop", loci_names)
seeds_sampled = matrix(nrow = total_trees, ncol = ((2*num_loci)+1))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c("Pop", loci_names)
head(seeds_sampled)
seeds_sampled = matrix(nrow = total_trees, ncol = ((2*num_loci)+1))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c(loci_names, "Pop")
head(seeds_sampled)
#call sample seed function
#args: data, num trees, num seeds, num donors, probability, loci
sample_seed(data, 10, 10, 5, c(rep(0.2,5)), 5)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\defining_functions.R")
#call sample seed function
#args: data, num trees, num seeds, num donors, probability, loci
sample_seed(data, 10, 10, 5, c(rep(0.2,5)), 5)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\defining_functions.R")
#call sample seed function
#args: data, num trees, num seeds, num donors, probability, loci
sample_seed(data, 10, 10, 5, c(rep(0.2,5)), 2)
tail(seeds_sampled)
#loop over x number of trees collectors are sampling from
i=1 #simple counter variable to keep track of the current row (individual)
#defining the number of loci simulated
num_loci = ((ncol(data)-2)/2)
w
#subset data to for the current population group
temp_data = data[which(data$Pop==paste("pop", w, sep="")),]
total_trees = nrow(temp_data)
total_trees
#choose mother
mother <- sample(total_trees, 1) #selecting a row from the dataframe
#choose father(s) randomly -- a vector of rows representing potential pollen donors
fathers <- sample(total_trees, num_pollen_donors)
mother
fathers
num_pollen_donors
#call sample seed function
#args: data, num trees, num seeds, num donors, probability, num pops
sample_seed(data, 10, 10, 5, c(rep(0.2,5)), 2)
tail(seeds_sampled)
num_pops
num_pops=2
View(seeds_sampled)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\defining_functions.R")
#call sample seed function
#args: data, num trees, num seeds, num donors, probability, num pops
sample_seed(data, 10, 10, 5, c(rep(0.2,5)), 2)
View(seeds_sampled)
#call sample seed function
#args: data, num trees, num seeds, num donors, probability, num pops
x = sample_seed(data, 10, 10, 5, c(rep(0.2,5)), 2)
View(x)
View(data)
dat_uniq = unique(data$Pop)
dat_uniq
length(dat_uniqu)
length(dat_uniq)
#defining the number of populations simulated
dat_uniq = unique(data$Pop)
num_pops = length(dat_uniq)
num_pops
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\defining_functions.R")
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
x = sample_seed(data, 10, 10, 5, c(rep(0.2,5)))
View(x)
