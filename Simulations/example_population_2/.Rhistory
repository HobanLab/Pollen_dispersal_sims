citation('hierfstat')
#number of trees in population that collectors will sample from
#***NOTE: this will vary by scenario, might end up being a vector?
trees_to_sample = 10
#number of seeds collectors will sample from each tree
#***NOTE: this will vary for each tree sampled
seeds_to_sample = c(5, 15, 15, 20, 20, 25, 30, 30, 40, 50)
#number of pollen donors per maternal tree
num_pollen_donors = 1 #defined as 1 for simplicity
pollen_probability = c(1) #defined as 1 since there is 1 father per mother
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
seeds_sampled = matrix(nrow = total_trees, ncol = ((2*num_loci)+1))
num_loci = 5
num_loci = 5
total_seeds = 250
#number of trees in population that collectors will sample from
#***NOTE: this will vary by scenario, might end up being a vector?
trees_to_sample = 10
#number of seeds collectors will sample from each tree
#***NOTE: this will vary for each tree sampled
seeds_to_sample = c(5, 15, 15, 20, 20, 25, 30, 30, 40, 50)
#number of pollen donors per maternal tree
num_pollen_donors = 1 #defined as 1 for simplicity
pollen_probability = c(1) #defined as 1 since there is 1 father per mother
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
seeds_sampled = matrix(nrow = total_trees, ncol = ((2*num_loci)+1))
seeds_sampled = matrix(nrow = total_seeds, ncol = ((2*num_loci)+1))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c(loci_names, "Pop")
#list of genalex files for all simulation replicates
genalex_list = list.files(mydir, ".csv$")
i= 1
##################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
library(poppr)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\defining_functions.R")
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population_2"
setwd(mydir)
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#importing and converting genepop files to genalex
import_gen2genalex_files(mydir, ".gen$")
genalex_list
#list of genalex files for all simulation replicates
genalex_list = list.files(mydir, ".csv$")
i=1
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- the population data is not required for this
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
x = sample_seed(data, trees_to_sample, seeds_to_sample, num_pollen_donors, pollen_probability)
View(x)
