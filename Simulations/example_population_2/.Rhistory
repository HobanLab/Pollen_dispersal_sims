version = "alt"
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata", sep=""))
#plot containing all oak species
#number sampled on x axis
#proportion of alleles on y axis
#
ggplot(data=combined_quercus_new, aes(x=num_sampled, y=avg_prop_all, color=species)) +
geom_line(size=1,aes(linetype=species)) +
scale_linetype_manual(values=c("solid", "dotted", "longdash", "solid", "twodash", "dotted", "solid", "longdash", "solid", "dotdash", "solid", "dotted", "solid", "longdash")) +
ylim(0.7,1) +
xlim(0,400) +
ggtitle("Genetic diversity captured for varying sample sizes across 14 oak species") +
xlab("Number of unique individuals sampled") +
ylab("Proportion of alleles captured") +
labs(fill = "Species") +
theme(text = element_text(size=15)) +
theme_bw() #white background
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata,", sep=""))
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
minSize
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata,", sep=""))
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata,", sep=""))
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata,", sep=""))
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata,", sep=""))
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
load("combined_quercus_orig.Rdata")
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load("combined_quercus_orig.Rdata")
load(paste("combined_quercus_", version, ".Rdata,", sep=""))
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
load(paste("combined_quercus_", version, ".Rdata,", sep=""))
####################################################################################################
#library functions
library(ggplot2)
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata", sep=""))
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata", sep=""))
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
minSize
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata", sep=""))
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
minSize
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata", sep=""))
version
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
minSize
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata", sep=""))
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
minSize
load("combined_quercus_orig.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load("combined_quercus_alt.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
i
i=0
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load("combined_quercus_alt.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load("combined_quercus_orig.Rdata")
num_species = 14
i=1
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
####################################################################################################
#library functions
library(ggplot2)
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata", sep=""))
#plot containing all oak species
#number sampled on x axis
#proportion of alleles on y axis
#
ggplot(data=combined_quercus_new, aes(x=num_sampled, y=avg_prop_all, color=species)) +
geom_line(size=1,aes(linetype=species)) +
scale_linetype_manual(values=c("solid", "dotted", "longdash", "solid", "twodash", "dotted", "solid", "longdash", "solid", "dotdash", "solid", "dotted", "solid", "longdash")) +
ylim(0.7,1) +
xlim(0,400) +
ggtitle(paste("Genetic diversity captured across 14 oak species", version)) +
xlab("Number of unique individuals sampled") +
ylab("Proportion of alleles captured") +
labs(fill = "Species") +
theme(text = element_text(size=15)) +
theme_bw() #white background
####################################################################################################
#library functions
library(ggplot2)
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata", sep=""))
#plot containing all oak species
#number sampled on x axis
#proportion of alleles on y axis
#
ggplot(data=combined_quercus_new, aes(x=num_sampled, y=avg_prop_all, color=species)) +
geom_line(size=1,aes(linetype=species)) +
scale_linetype_manual(values=c("solid", "dotted", "longdash", "solid", "twodash", "dotted", "solid", "longdash", "solid", "dotdash", "solid", "dotted", "solid", "longdash")) +
ylim(0.7,1) +
xlim(0,400) +
ggtitle(paste("Genetic diversity captured across 14 oak species", version)) +
xlab("Number of unique individuals sampled") +
ylab("Proportion of alleles captured") +
labs(fill = "Species") +
theme(text = element_text(size=15)) +
theme_bw() #white background
View(final_quercus_results)
View(combined_quercus_new)
View(final_quercus_results)
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load("combined_quercus_orig.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
i
i=1
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
minSize
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load("combined_quercus_alt.Rdata")
num_species = 14
i
i=1
i
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("quercus_final_results_", version, ".Rdata", sep=""))
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("quercus_final_results_", version, ".Rdata", sep=""))
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("quercus_final_results_", version, ".Rdata", sep=""))
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file=paste("min_samp_size_", version, ".Rdata", sep=""))
minSize
##################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
library(poppr)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\defining_functions.R")
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
#number of loci modeled in simulations
num_loci = 1
#number of trees in population
total_trees = 100
#number of trees in population that collectors will sample from
trees_to_sample = 10
#number of seeds collectors will sample from each tree
seeds_to_sample = 10
#number of pollen donors per maternal tree
num_pollen_donors = 1 #defined as 1 for simplicity
pollen_probability = c(1) #defined as 1 since there is 1 father per mother
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
seeds_sampled = matrix(nrow = total_trees, ncol = (2*num_loci))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c(loci_names)
head(seeds_sampled)
#list of genalex files for all simulation replicates
genalex_list = list.files(mydir, ".csv$")
#for number of simulation replicates
for(i in 1:length(genalex_list)) {
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- the population data is not required for this
data = data[-2,]
data = data[-1,]
data = data[,-5] #getting rid of the empty column
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#call sampling function here--save result in 3D matrix? (third dim. is for replicates?)
}
seeds_sampled(data, 10, 10, 1, 1, 1)
seeds_to_sample(data, 10, 10, 1, 1, 1)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\defining_functions.R")
seeds_to_sample(data, 10, 10, 1, 1, 1)
sample_seed(data, 10, 10, 1, 1, 1)
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population_2"
setwd(mydir)
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#importing and converting genepop files to genalex
import_gen2genalex_files(mydir, ".gen$")
#number of trees in population
total_trees = 100
#number of trees in population that collectors will sample from
trees_to_sample = 10
#number of seeds collectors will sample from each tree
seeds_to_sample = 10
#number of pollen donors per maternal tree
num_pollen_donors = 1 #defined as 1 for simplicity
pollen_probability = c(1) #defined as 1 since there is 1 father per mother
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
seeds_sampled = matrix(nrow = total_trees, ncol = (2*num_loci))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c(loci_names)
View(seeds_sampled)
#number of loci modeled in simulations
num_loci = 5
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
loci_names
seeds_sampled = matrix(nrow = total_trees, ncol = (2*num_loci))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c(loci_names)
view(seeds_sampled)
head(seeds_sampled)
#list of genalex files for all simulation replicates
genalex_list = list.files(mydir, ".csv$")
i
i=1
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- the population data is not required for this
data = data[-2,]
data = data[-1,]
data = data[,-5] #getting rid of the empty column
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
data
head(data)
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
head(data)
#cut off first 2 rows in dataframe -- the population data is not required for this
data = data[-2,]
data = data[-1,]
head(data)
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
head(data)
data = data[-1,] #removing the first row -- repeat of now column headers
head(data)
#call sample seed function
#args: data, num trees, num seeds, num donors, probability, loci
sample_seed(data, 10, 10, 1, 1, 5)
rep(0.2,5)
#call sample seed function
#args: data, num trees, num seeds, num donors, probability, loci
sample_seed(data, 10, 10, 5, c(rep(0.2,5)), 5)
#call sample seed function
#args: data, num trees, num seeds, num donors, probability, loci
sample_seed(data, 10, 10, 5, c(0.8, 0.11, 0.03, 0.03, 0.03), 5)
