combined_list_params[[1]]
combined_list_params = NULL
(250/num_maternal_trees[i])
combined_list_params = list()
num_maternal_trees = c(50, 25, 10, 5, 2, 1) #different number of maternal trees to be sampled for each scenario
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:length(num_maternal_trees)) {
for(j in 1:(250/num_maternal_trees[i])) {
temp = list(num_maternal_trees[i], j, 1, 1) #all same
combined_list_params[[x]] = temp
x=x+1
temp = list(num_maternal_trees[i], j, j, c(rep((1/j), j))) #all unique*
combined_list_params[[x]] = temp
x=x+1
#skewed
if(j==1){
temp = list(num_maternal_trees[i], j, 1, 1) #if there's only one seed, it can't be skewed
} else if (j!=1) {
temp = list(num_maternal_trees[i], j, j, c(0.8, rep((0.2/(j-1)), (j-1)))) # if more than 1, then skew pollen donation
}
combined_list_params[[x]] = temp
x=x+1
}
}
combined_list_params[[1395]]
list(50, c(rep(1, (250/num_maternal_trees[i]))), 1, 1)
combined_list_params = list() #used for saving scenario parameters--ends up being a list of lists
#each scenario can be accessed using combined_list_params[[x]] where x is the scenario desired (goes in order of the values on the table)
num_maternal_trees = c(50, 25, 10, 5, 2, 1) #different number of maternal trees to be sampled for each scenario
list(50, c(rep(1, (250/num_maternal_trees[i]))), 1, 1)
i==1
i=1
list(50, c(rep(1, (250/num_maternal_trees[i]))), 1, 1)
combined_list_params = list() #used for saving scenario parameters--ends up being a list of lists
#each scenario can be accessed using combined_list_params[[x]] where x is the scenario desired (goes in order of the values on the table)
num_maternal_trees = c(50, 25, 10, 5, 2, 1) #different number of maternal trees to be sampled for each scenario
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:length(num_maternal_trees)) { #loops over the vector of maternal trees
for(j in 1:(250/num_maternal_trees[i])) { #loops ofrom 1 to max number number of seeds to sample per maternal tree
temp = list(num_maternal_trees[i], c(rep(j, (250/num_maternal_trees[i]))), 1, 1) #All Same scenario--all seeds created from 1 pollen donor
combined_list_params[[x]] = temp #saving the parameters to a list (list of lists)
x=x+1 #increment counter
temp = list(num_maternal_trees[i], c(rep(j, (250/num_maternal_trees[i]))), j, c(rep((1/j), j))) #All Unique* scenario--each pollen donor has equal probability to pollinate seeds
combined_list_params[[x]] = temp #saving parameters
x=x+1 #increment
#Skewed scenarios--multiple pollen donors, but 1 donates the majority of the pollen (80%), the rest have equal probability to donate
if(j==1){
temp = list(num_maternal_trees[i], c(rep(j, (250/num_maternal_trees[i]))), 1, 1) #if there's only one seed, it can't be skewed
} else if (j!=1) {
temp = list(num_maternal_trees[i], c(rep(j, (250/num_maternal_trees[i]))), j, c(0.8, rep((0.2/(j-1)), (j-1)))) # if more than 1, then skew pollen donation
}
combined_list_params[[x]] = temp
x=x+1
}
}
combined_list_params[[1]]
combined_list_params[[4]]
combined_list_params[[6]]
combined_list_params[[60]]
combined_list_params_skewed = list()
num_maternal_trees_skewed = c(50, 25, 10, 5, 5, 2)
seq(100, 200, by=50)
total_seeds = seq(100, 200, by=50)
c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1)))
total_seeds[i]
total_seeds
total_seeds = c(seq(100, 200, by=50)) #manually saving the number of seeds total to sample
total_seeds[i]
total_seeds
i
i=1
total_seeds[i]
c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1)))
#25 maternal trees
total_seeds = c(seq(50, 200, by=50))
#50 maternal trees
x = 1
total_seeds = c(seq(100, 200, by=50)) #manually saving the number of seeds total to sample
for(i in 1:3) {
temp = list(num_maternal_trees_skewed[1], c((0.51*total_seeds[i]), rep((0.01*total_seeds[i]), 49)), 1, 1) #All same
combined_list_params_skewed[[x]] = temp #saving parameters
x=x+1
temp = list(num_maternal_trees_skewed[1], c((0.51*total_seeds[i]), rep((0.01*total_seeds[i]), 49)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i]))) #All unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[1], c((0.51*total_seeds[i]), rep((0.01*total_seeds[i]), 49)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1))))
combined_list_params_skewed[[x]] = temp
x=x+1
}
#25 maternal trees
total_seeds = c(seq(50, 200, by=50))
for(i in 1:4) {
temp = list(num_maternal_trees_skewed[2], c((0.52*total_seeds[i]), rep((0.02*total_seeds[i]), 24)), 1, 1) #all same
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[2], c((0.52*total_seeds[i]), rep((0.02*total_seeds[i]), 24)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i]))) #all unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[2], c((0.52*total_seeds[i]), rep((0.02*total_seeds[i]), 24)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1)))) #skewed
combined_list_params_skewed[[x]] = temp
x=x+1
}
combined_list_params_skewed
total_seeds
x
#10 maternal trees
total_seeds = c(seq(20, 200, by=20))
total_seeds
#5 maternal trees--max 80% skew
total_seeds = c(seq(20,200,by=20))
total_seeds
#2 maternal trees
total_seeds = c(seq(5,200,by=5))
total_seeds
combined_list_params_skewed = list()
num_maternal_trees_skewed = c(50, 25, 10, 5, 5, 2)
#50 maternal trees
x = 1
total_seeds = c(seq(100, 200, by=50)) #manually saving the number of seeds total to sample
for(i in 1:3) {
temp = list(num_maternal_trees_skewed[1], c((0.51*total_seeds[i]), rep((0.01*total_seeds[i]), 49)), 1, 1) #All same
combined_list_params_skewed[[x]] = temp #saving parameters
x=x+1
temp = list(num_maternal_trees_skewed[1], c((0.51*total_seeds[i]), rep((0.01*total_seeds[i]), 49)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i]))) #All unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[1], c((0.51*total_seeds[i]), rep((0.01*total_seeds[i]), 49)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1))))
combined_list_params_skewed[[x]] = temp
x=x+1
}
#25 maternal trees
total_seeds = c(seq(50, 200, by=50))
for(i in 1:4) {
temp = list(num_maternal_trees_skewed[2], c((0.52*total_seeds[i]), rep((0.02*total_seeds[i]), 24)), 1, 1) #all same
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[2], c((0.52*total_seeds[i]), rep((0.02*total_seeds[i]), 24)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i]))) #all unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[2], c((0.52*total_seeds[i]), rep((0.02*total_seeds[i]), 24)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1)))) #skewed
combined_list_params_skewed[[x]] = temp
x=x+1
}
#10 maternal trees
total_seeds = c(seq(20, 200, by=20))
for(i in 1:10) {
temp = list(num_maternal_trees_skewed[3], c((0.5*total_seeds[i]), (0.1*total_seeds[i]), rep((0.05*total_seeds[i]), 8)), 1, 1)
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[3], c((0.5*total_seeds[i]), (0.1*total_seeds[i]), rep((0.05*total_seeds[i]), 8)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i])))
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[3], c((0.5*total_seeds[i]), (0.1*total_seeds[i]), rep((0.05*total_seeds[i]), 8)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1))))
combined_list_params_skewed[[x]] = temp
x=x+1
}
#5 maternal trees--max 80% skew
total_seeds = c(seq(20,200,by=20))
for(i in 1:10) {
temp = list(num_maternal_trees_skewed[4], c((0.8*total_seeds[i]), rep((0.05*total_seeds[i]), 4)), 1, 1) #all same
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[5], c((0.8*total_seeds[i]), rep((0.05*total_seeds[i]), 4)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i])))
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[5], c((0.8*total_seeds[i]), rep((0.05*total_seeds[i]), 4)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1))))
combined_list_params_skewed[[x]] = temp
x=x+1
}
#5 maternal trees--max 50% skew
total_seeds = c(seq(10,200,by=10))
for(i in 1:20) {
temp = list(num_maternal_trees_skewed[5], c((0.5*total_seeds[i]), (0.2*total_seeds[i]), rep((0.1*total_seeds[i]), 3)), 1, 1)#all same
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[5], c((0.5*total_seeds[i]), (0.2*total_seeds[i]), rep((0.1*total_seeds[i]), 3)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i])))#all unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[5], c((0.5*total_seeds[i]), (0.2*total_seeds[i]), rep((0.1*total_seeds[i]), 3)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1))))#skewed
combined_list_params_skewed[[x]] = temp
x=x+1
}
#2 maternal trees
total_seeds = c(seq(5,200,by=5))
for(i in 1:40) {
temp = list(num_maternal_trees_skewed[6], c((0.8*total_seeds[i]), (0.2*total_seeds[i])), 1, 1) # all same
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[6], c((0.8*total_seeds[i]), (0.2*total_seeds[i])), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i]))) # all unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[6], c((0.8*total_seeds[i]), (0.2*total_seeds[i])),  total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1)))) # skewed
combined_list_params_skewed[[x]] = temp
x=x+1
}
combined_list_params_skewed[261]
combined_list_params_skewed[262]
combined_list_params_skewed[261][[2]]
combined_list_params_skewed[[261]]
combined_list_params_skewed[[261]][[2]]
combined_list_params_skewed[[1]][[2]]
combined_list_params_skewed[[10]][[2]]
combined_list_params = list() #used for saving scenario parameters--ends up being a list of lists
#each scenario can be accessed using combined_list_params[[x]] where x is the scenario desired (goes in order of the values on the table)
num_maternal_trees = c(50, 25, 10, 5, 2, 1) #different number of maternal trees to be sampled for each scenario
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:length(num_maternal_trees)) { #loops over the vector of maternal trees
for(j in 1:(250/num_maternal_trees[i])) { #loops ofrom 1 to max number number of seeds to sample per maternal tree
temp = list(num_maternal_trees[i], c(rep(j, (250/num_maternal_trees[i]))), 1, 1) #All Same scenario--all seeds created from 1 pollen donor
combined_list_params[[x]] = temp #saving the parameters to a list (list of lists)
x=x+1 #increment counter
temp = list(num_maternal_trees[i], c(rep(j, (250/num_maternal_trees[i]))), j, c(rep((1/j), j))) #All Unique* scenario--each pollen donor has equal probability to pollinate seeds
combined_list_params[[x]] = temp #saving parameters
x=x+1 #increment
#Skewed scenarios--multiple pollen donors, but 1 donates the majority of the pollen (80%), the rest have equal probability to donate
if(j==1){
temp = list(num_maternal_trees[i], c(rep(j, (250/num_maternal_trees[i]))), 1, 1) #if there's only one seed, it can't be skewed
} else if (j!=1) {
temp = list(num_maternal_trees[i], c(rep(j, (250/num_maternal_trees[i]))), j, c(0.8, rep((0.2/(j-1)), (j-1)))) # if more than 1, then skew pollen donation
}
combined_list_params[[x]] = temp
x=x+1
}
}
combined_list_params[[1]]
combined_list_params[[4]]
combined_list_params[[9]]
combined_list_params[[15]]
##################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
library(poppr)
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population"
setwd(mydir)
sample_seed = function(data, num_trees_to_sample, num_seeds_to_sample, num_pollen_donors, pollen_probability) {
#loop over x number of trees collectors are sampling from
i=1 #simple counter variable to keep track of the current row (individual)
#defining the number of loci simulated
num_loci = ((ncol(data)-2)/2)
#defining the number of populations simulated
dat_uniq = unique(data$Pop)
num_pops = length(dat_uniq)
for(w in 1:num_pops) {
#subset data to for the current population group
temp_data = data[which(data$Pop==paste("pop", w, sep="")),]
total_trees = nrow(temp_data)
for(x in 1:num_trees_to_sample) {
#choose mother
mother <- sample(total_trees, 1) #selecting a row from the dataframe
#choose father(s) randomly -- a vector of rows representing potential pollen donors
fathers <- sample(total_trees, num_pollen_donors)
#create y number of seeds that collectors are sampling per tree
for(y in 1:num_seeds_to_sample[x]) {
#choose father based on probability vector
if(length(fathers)>1){
donor <- sample(fathers, 1, prob = pollen_probability)
}else if (length(fathers==1)){
donor = fathers
}
#Loop over number of loci simulated, in order to save the data
j=1 #counter variable to keep track of the current column
for(z in 1:num_loci) {
#then select allele from father randomly, save
p_alleles = c(temp_data[donor,paste("locus", z, "a", sep="")], data[donor,paste("locus", z, "b", sep="")])
seeds_sampled[i,j] = sample(p_alleles,1)
j=j+1
#select allele randomly for mother, save
m_alleles = c(temp_data[mother,paste("locus", z, "a", sep="")], data[mother,paste("locus", z, "b", sep="")])
seeds_sampled[i,j] = sample(m_alleles,1)
j=j+1
}
seeds_sampled[i,j] = paste("pop", w, sep="")
i=i+1
}
}
}
seeds_sampled
}
##################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
library(poppr)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\defining_functions.R")
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\example_population_2"
setwd(mydir)
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\two_pop_2500"
setwd(mydir)
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\functions.R")
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\functions.R")
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\functions.R")
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\functions.R")
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\"functions.R")
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\two_pop_2500"
setwd(mydir)
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#importing and converting genepop files to genalex
import_gen2genalex_files(mydir, ".gen$")
##############################################################################################################
#DEFINING VARIABLES
num_loci = 5
total_seeds = 250
#number of trees in population that collectors will sample from
#***NOTE: this will vary by scenario, might end up being a vector?
trees_to_sample = 10
#number of seeds collectors will sample from each tree
#***NOTE: this will vary for each tree sampled
seeds_to_sample = c(5, 15, 15, 20, 20, 25, 30, 30, 40, 50)
#number of pollen donors per maternal tree
num_pollen_donors = 1 #defined as 1 for simplicity
pollen_probability = c(1) #defined as 1 since there is 1 father per mother
#can change this vector as number of fathers increases, will be proportions, eg., 0.2, 0.2, 0.6 (but should add up to 1!)
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
seeds_sampled = matrix(nrow = total_seeds, ncol = ((2*num_loci)+1))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c(loci_names, "Pop")
#######################################################################################################
#Main processing loop
#first, import a single simulation replicate as genalex and convert to a dataframe
#list of genalex files for all simulation replicates
genalex_list = list.files(mydir, ".csv$")
#for every simulation replicate, process data, call function
for(i in 1:length(genalex_list)) {
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- the population data is not required for this
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#call sampling function here--save result in 3D matrix? (third dim. is for replicates?)
#for each element in scenario list (defined in parameters.R file)
#call the function using that scenario and save data
}
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
#x = sample_seed(data, trees_to_sample, seeds_to_sample, num_pollen_donors, pollen_probability)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\functions.R")
#including R-script containing functions used for import, conversions, and sampling
script = "C:\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\functions.R"
#including R-script containing functions used for import, conversions, and sampling
script = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\functions.R"
source(script)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\import_seed_functions.R")
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\import_seed_functions.R")
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\two_pop_2500"
setwd(mydir)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\import_seed_functions.R")
#including R-script containing functions used for import, conversions, and sampling
source("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts/import_seed_function.R")
dir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts"
list.files(dir)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\import_seed_functions.R")
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\import_seed_functions")
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\import_seed_functions.R")
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\import_seed_functions.R")
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\two_pop_2500"
setwd(mydir)
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#importing and converting genepop files to genalex
import_gen2genalex_files(mydir, ".gen$")
num_loci = 20
total_seeds = 250
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
seeds_sampled = matrix(nrow = total_seeds, ncol = ((2*num_loci)+1))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c(loci_names, "Pop")
seeds_sampled
#list of genalex files for all simulation replicates
genalex_list = list.files(mydir, ".csv$")
i=1
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- the population data is not required for this
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
View(data)
#combined_list_params ends up having 1395 elements!
#so 1395 scenarios are created
save(combined_list_params, file="combined_list_params.Rdata")
combined_list_params[[1]]
#combined_list_params ends up having 1395 elements!
#so 1395 scenarios are created
save(combined_list_params, file="combined_list_params.Rdata")
combined_list_params_skewed[[1]]
#combined_list_params_skewed ends up having 261 elements
#so 261 scenarios are created
save(combined_list_params_skewed, file="combined_list_params_skewed.Rdata")
load("combined_list_params.Rdata")
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
total_seeds = 250 #total seeds to be sampled
load("combined_list_params.Rdata")
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
seeds_sampled = matrix(nrow = total_seeds, ncol = ((2*num_loci)+1))
seeds_sampled = as.data.frame(seeds_sampled)
names(seeds_sampled) = c(loci_names, "Pop")
load("combined_list_params.Rdata")
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
#x = sample_seed(data, trees_to_sample, seeds_to_sample, num_pollen_donors, pollen_probability)
temp = sample_seed(data, combined_list_params[1])
combined_list_params[[1]]
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
#x = sample_seed(data, trees_to_sample, seeds_to_sample, num_pollen_donors, pollen_probability)
temp = sample_seed(data, combined_list_params[[1]])
combined_list_params[[1]][[1]]
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
#x = sample_seed(data, trees_to_sample, seeds_to_sample, num_pollen_donors, pollen_probability)
temp = sample_seed(data, combined_list_params[[1]][[1]], combined_list_params[[1]][[2]], combined_list_params[[1]][[3]], combined_list_params[[1]][[4]])
combined_list_params[[1]][[2]]
combined_list_params[[1]][[2]][1]
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\import_seed_functions.R")
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
#x = sample_seed(data, trees_to_sample, seeds_to_sample, num_pollen_donors, pollen_probability)
temp = sample_seed(data, combined_list_params[[1]][[1]], combined_list_params[[1]][[2]], combined_list_params[[1]][[3]], combined_list_params[[1]][[4]])
num_seeds_to_samp = combined_list_params[[1]][[2]]
num_seeds_to_samp
num_seeds_to_samp[1]
num_seeds_to_samp[2]
1:1
for(i in 1:1) {}
for(i in 1:1) {print("hello")}
combined_list_params[[1]][[2]]
C(combined_list_params[[1]][[2]])
as.vector(combined_list_params[[1]][[2]])
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
#x = sample_seed(data, trees_to_sample, seeds_to_sample, num_pollen_donors, pollen_probability)
temp = sample_seed(data, combined_list_params[[1]][[1]], as.vector(combined_list_params[[1]][[2]]), combined_list_params[[1]][[3]], combined_list_params[[1]][[4]])
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
#x = sample_seed(data, trees_to_sample, seeds_to_sample, num_pollen_donors, pollen_probability)
temp = sample_seed(data, combined_list_params[[1]][[1]], combined_list_params[[1]][[2]], combined_list_params[[1]][[3]], combined_list_params[[1]][[4]])
num_seeds_to_samp
num_seeds_to_samp[1]
x
x=1
w
#call sample seed function
#args: data, num trees, num seeds, num donors, probability
#x = sample_seed(data, trees_to_sample, seeds_to_sample, num_pollen_donors, pollen_probability)
temp = sample_seed(data, combined_list_params[[1]][[1]], combined_list_params[[1]][[2]], combined_list_params[[1]][[3]], combined_list_params[[1]][[4]])
