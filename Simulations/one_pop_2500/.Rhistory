legend(100, 0.03, legend=c("Sand Island", "Eastern Island"), col=c("blue", "red"), lty=1:2, cex=0.8)
sm.density.compare(Coleoptera, factor(Island), xlab="Average number of coleoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
sm.density.compare(Coleoptera, factor(Island), xlab="Average number of coleoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of coleoptera between islands")
legend(100, 0.03, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
sm.density.compare(Hymenoptera, factor(Island), xlab="Average number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of hymenoptera between islands")
legend(1250, 0.003, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
#Two way ANOVA
result2way <- aov(Island~Hymenoptera + Habitat_Association)
#Two way ANOVA
result2way <- aov(Island~Habitat_Association + Hymenoptera)
sm.density.compare(Hymenoptera, factor(Habitat_Association))
sm.density.compare(Coleoptera, factor(Habitat_Association))
sm.density.compare(Hymenoptera, factor(Habitat_Association))
result <- aov(Hymenoptera~Habitat_Association, data=stdata)
result <- aov(Hymenoptera~Habitat_Association, data=stdData)
summary(result)
sm.density.compare(Hymenoptera, factor(Island), xlab="Average number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
sm.density.compare(Hymenoptera, factor(Island), xlab="Average number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of hymenoptera between islands")
legend(1250, 0.003, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
ggplot(stdData, aes(x=Habitat_Association, y=Coleoptera, fill=Island)) + geom_boxplot() +
labs(title="Coleoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number coleoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
#Basic histogram
attach(stdData)
hist(Hymenoptera)
hist(Hymenoptera~Habitat_Association)
hist(Habitat_Association~Hymenoptera)
plot(d)
sm.density.compare(Hymenoptera, factor(Island), xlab="Average number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of hymenoptera between islands")
title(main="Relative densities of hymenoptera between islands")
legend(1250, 0.003, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
sm.density.compare(Hymenoptera, factor(Island), xlab="Avg. number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of hymenoptera between islands")
legend(1250, 0.003, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
counts <- table(Habitat_Association~Hyme)
counts <- table(Habitat_Association~Hymenoptera)
counts <- table(Habitat_Association$Hymenoptera)
barplot(Hymenoptera, Habitat_Association)
barplot(Hymenoptera, Habitat_Association)
barplot(Hymenoptera~Habitat_Association)
aggregate(Hymenoptera)
v <- c(Hymenoptera)
barplot(table(v))
table(Hymenoptera~Habitat_Association)
table(Hymenoptera$Habitat_Association)
table(Hymenoptera, Habitat_Association)
v<- table(Hymenoptera, Habitat_Association)
barplot(v)
c <- table(Coleoptera, Habitat_Association)
barplot(c)
x <- table(Hymenoptera, Island)
barplot(x)
sm.density.compare(Hymenoptera, factor(Island), xlab="Avg. number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of hymenoptera between islands")
legend(1250, 0.003, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
#Making a boxplot
#format: boxplot(y,x, data=dataSet, main="Title", xlab="label", ylab="label")
boxplot(Hymenoptera~Island, data=stdData, main="Distribution of Hymenoptera between Eastern and Sand Island", xlab="Island", ylab="Average number of Hymenoptera caught per day", col=000000)
#Making a boxplot
#format: boxplot(y,x, data=dataSet, main="Title", xlab="label", ylab="label")
boxplot(Hymenoptera~Island, data=stdData, main="Distribution of Hymenoptera between Eastern and Sand Island", xlab="Island", ylab="Average number of Hymenoptera caught per day", col=000000)
result <- aov(Hymenoptera~Island + factor(Habitat_Association))
#Basic histogram
attach(stdData)
#Importing data from excel
library(readxl)
stdData <- read_excel("Research/Midway Project/MANWR_Invert_Standardized_Data_03032019.xlsx")
result <- aov(Hymenoptera~Island + factor(Habitat_Association))
summary(result)
result <- aov(Hymenoptera~Island * factor(Habitat_Association))
summary(result)
res <- aov(Coleoptera~Island * factor(Habitat_Association))
summary(res)
#Making a boxplot
#format: boxplot(y,x, data=dataSet, main="Title", xlab="label", ylab="label")
boxplot(Hymenoptera~Island, data=stdData, main="Distribution of Hymenoptera between Eastern and Sand Island", xlab="Island", ylab="Average number of Hymenoptera caught per day", col=000000)
#Compares habitat association to hymenoptera between the two islands
ggplot(stdData, aes(x=Habitat_Association, y=Hymenoptera, fill=Island)) + geom_boxplot() +
labs(title="Hymenoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number hymenoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
#more advanced boxplot
library(ggplot2)
#Compares habitat association to hymenoptera between the two islands
ggplot(stdData, aes(x=Habitat_Association, y=Hymenoptera, fill=Island)) + geom_boxplot() +
labs(title="Hymenoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number hymenoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
sm.density.compare(Hymenoptera, factor(Island), xlab="Avg. number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
#More complex density plot
library(sm)
title(main="Relative densities of hymenoptera between islands")
sm.density.compare(Hymenoptera, factor(Island), xlab="Avg. number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of coleoptera between islands")
legend(100, 0.03, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
legend(100, 0.03, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
legend(100, 0.03, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
sm.density.compare(Coleoptera, factor(Island), xlab="Avg. number of coleoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
sm.density.compare(Coleoptera, factor(Island), xlab="Avg. number of coleoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
sm.density.compare(Coleoptera, factor(Island), xlab="Avg. number of coleoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
sm.density.compare(Coleoptera, factor(Island), xlab="Avg. number of coleoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of coleoptera between islands")
legend(100, 0.03, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
plot(Hymenoptera, Coleoptera)
plot(Hymenoptera, Coleoptera, fill=Island)
plot(Hymenoptera, Coleoptera, factor(Island))
plot(Hymenoptera, Coleoptera)
data<-stdData[stdData(c(3,13,19))]
stdData <- read_excel("Research/Midway Project/MANWR_Invert_Standardized_Data_03032019.xlsx")
data<-stdData[stdData(c(3,13,19))]
data<-stdData[c(3,13,19)]
View(data)
model<-lm(Hymenoptera~Coleoptera+Island)
anova(model)
model<-lm(Hymenoptera~Coleoptera)
anova(model)
model<-lm(log(Hymenoptera)~log(Coleoptera))
plot(log(Hymenoptera), log(Coleoptera))
plot(log(Hymenoptera), log(Coleoptera)+Island)
plot(log(Hymenoptera), log(Coleoptera)~Island)
model<-lm(Hymenoptera~Island, data=data)
anova(model)
model<-lm(Coleoptera~Island, data=data)
anova(model)
ggplot(stdData, aes(x=Habitat_Association, y=Coleoptera, fill=Island)) + geom_boxplot() +
labs(title="Coleoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number coleoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
#Compares habitat association to hymenoptera between the two islands
ggplot(stdData, aes(x=Habitat_Association, y=Hymenoptera, fill=Island)) + geom_boxplot() +
labs(title="Hymenoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number hymenoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
#Compares habitat association to hymenoptera between the two islands
ggplot(data, aes(x=Island, y=Hymenoptera)) + geom_boxplot() +
labs(title="Hymenoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number hymenoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
#Compares habitat association to hymenoptera between the two islands
ggplot(stdData, aes(x=Island, y=Hymenoptera, fill=Island)) + geom_boxplot() +
labs(title="Hymenoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number hymenoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
ggplot(stdData, aes(x=Habitat_Association, y=Coleoptera, fill=Island)) + geom_boxplot() +
labs(title="Coleoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number coleoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
##See if ants and beetles are correlated
model<-lm(Hymenoptera~Coleoptera)
plot(log(Hymenoptera), log(Coleoptera))
#Absolutely no correlation at all
plot(Coleoptera, Isopoda)
#Absolutely no correlation at all
plot(log(Coleoptera), log(Isopoda))
plot(log(Isopoda), log(Hymenoptera))
plot(log(Diptera), log(Hymenoptera))
plot(log(Diptera), log(Coleoptera))
plot(log(Coleoptera), log(Isopoda))
##They aren't.
plot(log(Hymenoptera), log(Coleoptera))
boxplot(Acari, Island)
boxplot(Acari~Island)
plot(Acari, Coleoptera)
plot(log(Acari), log(Coleoptera))
boxplot(Acari~Island)
##They aren't.
plot(log(Hymenoptera), log(Coleoptera))
#Compares habitat association to hymenoptera between the two islands
ggplot(stdData, aes(x=Habitat_Association, y=Hymenoptera, fill=Island)) + geom_boxplot() +
labs(title="Hymenoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number hymenoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
ggplot(stdData, aes(x=Habitat_Association, y=Coleoptera, fill=Island)) + geom_boxplot() +
labs(title="Coleoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number coleoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
##They aren't.
plot(log(Hymenoptera), log(Coleoptera))
#Making a boxplot
#format: boxplot(y,x, data=dataSet, main="Title", xlab="label", ylab="label")
boxplot(Hymenoptera~Island, data=stdData, main="Distribution of Hymenoptera between Eastern and Sand Island", xlab="Island", ylab="Average number of Hymenoptera caught per day", col=000000)
#col=rainbow() to make color
#col=000000 to make color
boxplot(Coleoptera~Island, data=stdData, main="Distribution of Coleoptera between Eastern and Sand Island", xlab="Island", ylab="Average number of Coleoptera per caught per day", col=rainbow(2))
#col=rainbow() to make color
#col=000000 to make color
boxplot(Coleoptera~Island, data=stdData, main="Distribution of Coleoptera between Eastern and Sand Island", xlab="Island", ylab="Average number of Coleoptera per caught per day", col=000000)
#Compares habitat association to hymenoptera between the two islands
ggplot(stdData, aes(x=Habitat_Association, y=Hymenoptera, fill=Island)) + geom_boxplot() +
labs(title="Hymenoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number hymenoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
ggplot(stdData, aes(x=Habitat_Association, y=Coleoptera, fill=Island)) + geom_boxplot() +
labs(title="Coleoptera abundance differences between habitat associations and island", x="Habitat Association", y="Avg. number coleoptera caught per trap night") +
scale_fill_manual(values=c("#35C4BD", "#FF8A63"))
sm.density.compare(Hymenoptera, factor(Island), xlab="Avg. number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
sm.density.compare(Coleoptera, factor(Island), xlab="Avg. number of coleoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
sm.density.compare(Hymenoptera, factor(Island), xlab="Avg. number of hymenoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of hymenoptera between islands")
legend(1250, 0.003, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
sm.density.compare(Coleoptera, factor(Island), xlab="Avg. number of coleoptera caught per trap night", col=c("#35C4BD", "#FF8A63"))
title(main="Relative densities of coleoptera between islands")
legend(100, 0.03, legend=c("Sand Island", "Eastern Island"), col=c("#35C4BD", "#FF8A63"), lty=1:2, cex=0.8)
install.packages("tidyr")
long <- gather(stdData, Order, number, Acari:Thysanoptera, factor_key = TRUE)
long
library(tidyr)
long <- gather(stdData, Order, number, Acari:Thysanoptera, factor_key = TRUE)
long
attach(stdData)
plot(Hymenoptera, Coleoptera)
plot(log(Hymenoptera), log(Coleoptera))
# make vector
vector = c(1, 2, 3, 4)
# make vector
vector = c(1, 2, 3, 4)
vector
# make dataframe
vector2 = c(2, 4, 6, 8)
data = data.frame(vector, vector2)
data
# make dataframe
vector2 = c(2, 4, 6, 8)
data = data.frame(vector, vector2)
data
# function
mean(vector)
? mean
:100
x = 1:100
x
# runif
y = runif(100, min = 1, max = 100)
y
z = x*2 + 10
z
?plot
plot(x, y)
plot(x, z)
plot(x, y)
plot(x, z)
plot(x, z, pch = 20, col = 'blue')
plot(x, z, pch = 20, col = z)
# r has 8 default colors that it reads as numbers
plot(x, z, type = 'l', col = 'blue')
x
x = 2:100
x
?seq()
x = seq(from = 2, to = 100, by 2)
x
x = seq(2, 100, by = 2)
x
y = x*x
y
?rep
z = rep(x, times = 25)
z
z = rep(c(1, 2), each = 25)
z
plot(x, y, pch = 20, col = z)
data,frame(x, y, z)
data,frame(x, y)
data.frame(x, y, z)
summary(mass)
install.packages("poppr")
install.packages("hierfst")
install.packages("diveRsity")
install.packages("adgenet")
install.packages("tidyr")
my_data = PlantGrowth
View(my_data)
anova_res = aov(weight ~ group, data = my_data)
summary.aov(anova_res)
library(diveRsity)
library(poppr)
##################################################################################
#Library functions
library(adegenet)
library(tidyr)
library(dplyr)
#including R-script containing functions used for import, conversions, and sampling
source("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts/import_seed_functions.R")
#defining the working directory containing simulation files
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500"
setwd(mydir)
my_dir = "C:/Users/kayle/OneDrive/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500"
setwd(mydir)
my_dir = "C:/Users/kayle/OneDrive/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500"
setwd(mydir)
setwd(my_dir)
setwd(""C:/Users/kayle/OneDrive/Documents/Pollen_dispersal_sims/R-scripts"")
setwd("C:/Users/kayle/OneDrive/Documents/Pollen_dispersal_sims/R-scripts")
load("combined_list_params_skewed.Rdata")
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#creating a container to store the results of sampling and other important data
# five columns to save the proportion of alleles captured, number of seeds sampled,
#number of trees sampled, and number of pollen donors, and the donor type (5 cols)
#each row indicates the scenario (465)
#the third dimension is the simulation replicate (10)
#saving each of the pollen donor scenarios in different arrays--we can combine them later if we need to!
#this is just easier because it's less filtering and more organized
prop_capt_all_same = array(dim=c(465,5,1000))
prop_capt_all_eligible = array(dim=c(465,5,1000))
prop_capt_skewed = array(dim=c(465,5,1000))
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
setwd(mydir)
setwd(my_dir)
#Main loop overview:
#for every simulation replicate, process data to be usable for the function
#then, we have three separate loops, that loop over the parameters created in defining_function_parameters.R
#there are three separate loops for the three pollen donor scnearios (skewed, all eligble, and all same)
#calculate proportion of alleles captured by
#finally, save results (prop. alleles capt, number seeds sampled, number trees sampled, and number pollen donors)
for(i in 1:length(genalex_list)) {
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#All same pollen scenarios
#for each element in scenario list--for 'all same' sampling (defined in defining_function_parameters.R file)
for(x in 1:length(all_same_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct)) #counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured = captured/total, save these results
prop_capt_all_same[x,2,i] = ((all_same_params[[x]][[1]])*(all_same_params[[x]][[2]][[1]]))#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,4,i] = (all_same_params[[x]][[3]]) #number of pollen donors
prop_capt_all_same[x,5,i] = "all_same"
}
#'all eligible' sampling
for(x in 1:length(all_eligible_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct))#counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_eligible[x,1,i] = (captured/total) #proportion of alleles captured= captured/total
prop_capt_all_eligible[x,2,i] = ((all_eligible_params[[x]][[1]])*(all_eligible_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_all_eligible[x,3,i] = (all_eligible_params[[x]][[1]]) #number of trees sampled
prop_capt_all_eligible[x,4,i] = (all_eligible_params[[x]][[3]]) #number of pollen donors
prop_capt_all_eligible[x,5,i] = "all_eligible"
}
#skewed sampling
for(x in 1:length(skewed_params)) {
temp = sample_seed(data, skewed_params[[x]][[1]], skewed_params[[x]][[2]], skewed_params[[x]][[3]], skewed_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_skewed[x,1,i] = (captured/total)#proportion of alleles captured = captured/ total
prop_capt_skewed[x,2,i] = ((skewed_params[[x]][[1]])*(skewed_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_skewed[x,3,i] = (skewed_params[[x]][[1]]) #number of trees sampled
prop_capt_skewed[x,4,i] = (skewed_params[[x]][[3]]) #number of pollen donors
prop_capt_skewed[x,5,i] = "skewed"
}
}
my_dir
genalex_list = list.files(my_dir, ".csv$")
genalex_list
#Main loop overview:
#for every simulation replicate, process data to be usable for the function
#then, we have three separate loops, that loop over the parameters created in defining_function_parameters.R
#there are three separate loops for the three pollen donor scnearios (skewed, all eligble, and all same)
#calculate proportion of alleles captured by
#finally, save results (prop. alleles capt, number seeds sampled, number trees sampled, and number pollen donors)
for(i in 1:length(genalex_list)) {
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#All same pollen scenarios
#for each element in scenario list--for 'all same' sampling (defined in defining_function_parameters.R file)
for(x in 1:length(all_same_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct)) #counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured = captured/total, save these results
prop_capt_all_same[x,2,i] = ((all_same_params[[x]][[1]])*(all_same_params[[x]][[2]][[1]]))#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,4,i] = (all_same_params[[x]][[3]]) #number of pollen donors
prop_capt_all_same[x,5,i] = "all_same"
}
#'all eligible' sampling
for(x in 1:length(all_eligible_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct))#counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_eligible[x,1,i] = (captured/total) #proportion of alleles captured= captured/total
prop_capt_all_eligible[x,2,i] = ((all_eligible_params[[x]][[1]])*(all_eligible_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_all_eligible[x,3,i] = (all_eligible_params[[x]][[1]]) #number of trees sampled
prop_capt_all_eligible[x,4,i] = (all_eligible_params[[x]][[3]]) #number of pollen donors
prop_capt_all_eligible[x,5,i] = "all_eligible"
}
#skewed sampling
for(x in 1:length(skewed_params)) {
temp = sample_seed(data, skewed_params[[x]][[1]], skewed_params[[x]][[2]], skewed_params[[x]][[3]], skewed_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_skewed[x,1,i] = (captured/total)#proportion of alleles captured = captured/ total
prop_capt_skewed[x,2,i] = ((skewed_params[[x]][[1]])*(skewed_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_skewed[x,3,i] = (skewed_params[[x]][[1]]) #number of trees sampled
prop_capt_skewed[x,4,i] = (skewed_params[[x]][[3]]) #number of pollen donors
prop_capt_skewed[x,5,i] = "skewed"
}
}
#creating a container to store the results of sampling and other important data
# five columns to save the proportion of alleles captured, number of seeds sampled,
#number of trees sampled, and number of pollen donors, and the donor type (5 cols)
#each row indicates the scenario (465)
#the third dimension is the simulation replicate (10)
#saving each of the pollen donor scenarios in different arrays--we can combine them later if we need to!
#this is just easier because it's less filtering and more organized
prop_capt_all_same = array(dim=c(465,5,1000))
prop_capt_all_eligible = array(dim=c(465,5,1000))
prop_capt_skewed = array(dim=c(465,5,1000))
#Main loop overview:
#for every simulation replicate, process data to be usable for the function
#then, we have three separate loops, that loop over the parameters created in defining_function_parameters.R
#there are three separate loops for the three pollen donor scnearios (skewed, all eligble, and all same)
#calculate proportion of alleles captured by
#finally, save results (prop. alleles capt, number seeds sampled, number trees sampled, and number pollen donors)
for(i in 1:length(genalex_list)) {
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#All same pollen scenarios
#for each element in scenario list--for 'all same' sampling (defined in defining_function_parameters.R file)
for(x in 1:length(all_same_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct)) #counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured = captured/total, save these results
prop_capt_all_same[x,2,i] = ((all_same_params[[x]][[1]])*(all_same_params[[x]][[2]][[1]]))#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,4,i] = (all_same_params[[x]][[3]]) #number of pollen donors
prop_capt_all_same[x,5,i] = "all_same"
}
#'all eligible' sampling
for(x in 1:length(all_eligible_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct))#counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_eligible[x,1,i] = (captured/total) #proportion of alleles captured= captured/total
prop_capt_all_eligible[x,2,i] = ((all_eligible_params[[x]][[1]])*(all_eligible_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_all_eligible[x,3,i] = (all_eligible_params[[x]][[1]]) #number of trees sampled
prop_capt_all_eligible[x,4,i] = (all_eligible_params[[x]][[3]]) #number of pollen donors
prop_capt_all_eligible[x,5,i] = "all_eligible"
}
#skewed sampling
for(x in 1:length(skewed_params)) {
temp = sample_seed(data, skewed_params[[x]][[1]], skewed_params[[x]][[2]], skewed_params[[x]][[3]], skewed_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_skewed[x,1,i] = (captured/total)#proportion of alleles captured = captured/ total
prop_capt_skewed[x,2,i] = ((skewed_params[[x]][[1]])*(skewed_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_skewed[x,3,i] = (skewed_params[[x]][[1]]) #number of trees sampled
prop_capt_skewed[x,4,i] = (skewed_params[[x]][[3]]) #number of pollen donors
prop_capt_skewed[x,5,i] = "skewed"
}
}
