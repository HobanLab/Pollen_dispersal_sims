x = 1 #x is the list counter variable that names each of the lists
for(i in 1:5){
assign(paste("list", x, sep=""), list(50, i, i, 1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(50, i, i, (1/i))) #all unique*
x=x+1
#skewed
if(i=1){
assign(paste("list", x, sep=""), list(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else {
assign(paste("list", x, sep=""), list(50, i, i, c(0.8, rep((0.2/(i-1)), i)))) #skewed-- one donates 80% of the pollen, rest is split up evenly between the rest
}
x=x+1
}
i=3
assign(paste("list", x, sep=""), list(50, i, i, 1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(50, i, i, (1/i))) #all unique*
x=x+1
#skewed
if(i=1) {
assign(paste("list", x, sep=""), list(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else {
assign(paste("list", x, sep=""), list(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1))))
}
x=x+1
}
i==1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else {
assign(paste("list", x, sep=""), list(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1))))
}
x=x+1
}
i!=1
i=3
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x
list6
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:5) {
assign(paste("list", x, sep=""), list(50, i, i, 1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(50, i, i, (1/i))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
list3
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:5) {
assign(paste("list", x, sep=""), c(50, i, i, 1)) #all same
x=x+1
assign(paste("list", x, sep=""), c(50, i, i, (1/i))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), c(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), c(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
list1
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:5) {
assign(paste("v", x, sep=""), c(50, i, i, 1)) #all same
x=x+1
assign(paste("v", x, sep=""), c(50, i, i, (1/i))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("v", x, sep=""), c(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("v", x, sep=""), c(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
v3
v6
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:5) {
assign(paste("v", x, sep=""), c(50, i, i, 1)) #all same
x=x+1
assign(paste("v", x, sep=""), c(50, i, i, rep((1/i), i))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("v", x, sep=""), c(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("v", x, sep=""), c(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:5) {
assign(paste("v", x, sep=""), list(50, i, i, 1)) #all same
x=x+1
assign(paste("v", x, sep=""), list(50, i, i, rep((1/i), i))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("v", x, sep=""), list(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("v", x, sep=""), list(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
list 5
list5
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:5) {
assign(paste("list", x, sep=""), list(50, i, i, 1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(50, i, i, rep((1/i), i))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(50, i, i, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
list5
list6
list8
list9
as.vector(list9)
list9[[1]]
list9[[4]]
#50 maternal trees
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:5) {
assign(paste("list", x, sep=""), list(50, i, 1, 1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(50, i, i, c(rep((1/i), i)))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(50, i, 1, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
#25 maternal trees
for(i in 1:10){
assign(paste("list", x, sep=""), list(25,i,1,1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(25,i,i, c(rep((1/i),i)))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(25, i, 1, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(25, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
list16
list20
list 23
list23
list45
#10 maternal trees
for(i in 1:20){
assign(paste("list", x, sep=""), list(10,i,1,1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(10,i,i, c(rep((1/i),i)))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(10, i, 1, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(10, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
#5 maternal trees
for(i in 1:50){
assign(paste("list", x, sep=""), list(5,i,1,1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(5,i,i, c(rep((1/i),i)))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(5, i, 1, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(5, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
#2 maternal trees
for(i in 1:100){
assign(paste("list", x, sep=""), list(2,i,1,1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(2,i,i, c(rep((1/i),i)))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(2, i, 1, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(2, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
#1 maternal tree
for(i in 1:250){
assign(paste("list", x, sep=""), list(1,i,1,1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(1,i,i, c(rep((1/i),i)))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(1, i, 1, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(1, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
list430
list435
list436
list437
list1305
#50 maternal trees
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:5) {
assign(paste("list", x, sep=""), list(50, i, 1, 1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(50, i, i, c(rep((1/i), i)))) #all unique*
x=x+1
#skewed
if(i==1){
assign(paste("list", x, sep=""), list(50, i, 1, 1)) #if there's only one seed, it can't be skewed
} else if (i!=1) {
assign(paste("list", x, sep=""), list(50, i, i, c(0.8, rep((0.2/(i-1)), (i-1)))))
}
x=x+1
}
list
list3
combined_list = list(list1, list2, list3)
combined_list
combined_list[[1]]
combined_list[[2]]
combined_list[[3]]
list4
list6
paste('list', x, sep='')
x
x=1
paste('list', x, sep='')
combined_list=NULL
combined_list = list(paste('list', x, sep=''))
combined_list
x
assign(combined_list, paste("list", x, sep=""))
combined_list = paste("list",x,sep="")
combined_list
i=1
list1 = list(50,i,1,1)
list1
assign(combined_list, list1)
combined_list
num_maternal_trees = c(50, 25, 10, 5, 2, 1)
length(num_maternal_trees)
combined_list_params = list()
temp = list(50,1,1,1)
append(combined_list_params, temp)
combined_list_params
combined_list_params = append(combined_list_params, temp)
combined_list_params
#assign(paste("list", x, sep=""), list(50, j, j, c(rep((1/j), j)))) #all unique*
temp = list(50,1,1,1)
#assign(paste("list", x, sep=""), list(50, j, j, c(rep((1/j), j)))) #all unique*
temp = list(50,2,1,1)
combined_list_params = append(combined_list_params, temp)
combined_list_params
combined_list_params[[1]]
combined_list_params[[2]]
combined_list_params[[[1]]]
combined_list_params[1]
combined_list_params = list()
num_maternal_trees = c(50, 25, 10, 5, 2, 1) #different number of maternal trees to be sampled for each scenario
x=1
i=1
combined_list_params = list()
num_maternal_trees = c(50, 25, 10, 5, 2, 1) #different number of maternal trees to be sampled for each scenario
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:length(num_maternal_trees)) {
for(j in 1:(250/num_maternal_trees[i])) {
assign(paste("list", x, sep=""), list(50, j, 1, 1)) #all same
x=x+1
assign(paste("list", x, sep=""), list(50, j, j, c(rep((1/j), j)))) #all unique*
x=x+1
#skewed
if(j==1){
assign(paste("list", x, sep=""), list(50, j, 1, 1)) #if there's only one seed, it can't be skewed
} else if (j!=1) {
assign(paste("list", x, sep=""), list(50, j, j, c(0.8, rep((0.2/(j-1)), (j-1)))))
}
x=x+1
}
}
list1035
list1395
list1036
list1396
x=1
list_names = append(paste("list",x,sep=""))
list_names
list_names
list_names = c()
list_names = append(paste("list",x,sep=""))
list_names = append(list_names, paste("list",x,sep=""))
list_names
append(list_names, noquote(paste("list",x,sep="")))
list_names = append(list_names, noquote(paste("list",x,sep="")))
list_names
list_names = c()
list_names = append(list_names, noquote(paste("list",x,sep="")))
list_Names
list_names
temp = list(50,1,1,1)
temp = list(50,1,1,1)
i=1
x=1
combined_list_params[1] = temp
combined_list_params[[1]] = temp
combined_list_params
combined_list_params[[1]]
combined_list_params = NULL
(250/num_maternal_trees[i])
combined_list_params = list()
num_maternal_trees = c(50, 25, 10, 5, 2, 1) #different number of maternal trees to be sampled for each scenario
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:length(num_maternal_trees)) {
for(j in 1:(250/num_maternal_trees[i])) {
temp = list(num_maternal_trees[i], j, 1, 1) #all same
combined_list_params[[x]] = temp
x=x+1
temp = list(num_maternal_trees[i], j, j, c(rep((1/j), j))) #all unique*
combined_list_params[[x]] = temp
x=x+1
#skewed
if(j==1){
temp = list(num_maternal_trees[i], j, 1, 1) #if there's only one seed, it can't be skewed
} else if (j!=1) {
temp = list(num_maternal_trees[i], j, j, c(0.8, rep((0.2/(j-1)), (j-1)))) # if more than 1, then skew pollen donation
}
combined_list_params[[x]] = temp
x=x+1
}
}
combined_list_params[[1395]]
##################################################################################
#Library functions
library(adegenet)
library(diveRsity)
library(poppr)
library(tidyr)
library(dplyr)
#including R-script containing functions used for import, conversions, and sampling
source("C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\R-scripts\\import_seed_functions.R")
#defining the working directory containing simulation files
mydir = "C:\\Users\\kayle\\Documents\\Pollen_dispersal_sims\\Simulations\\two_pop_2500"
setwd(mydir)
#including R-script containing functions used for import, conversions, and sampling
source("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts/import_seed_functions.R")
#including edited arp2gen function
source("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts/arp2gen_edit")
#including edited arp2gen function
source("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts/arp2gen_edit.R")
#defining the working directory containing simulation files
mydir = "C/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500"
setwd(mydir)
#defining the working directory containing simulation files
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500"
setwd(mydir)
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#importing and converting genepop files to genalex
import_gen2genalex_files(mydir, ".gen$")
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
total_seeds = 250 #total seeds to be sampled
load("combined_list_params.Rdata") #loading in function parameters defined in defining_function_parameters.R script
all_same_params = list() #used for saving scenario parameters--ends up being a list of lists
#each scenario can be accessed using all_same_params[[x]] where x is the scenario desired (goes in order of the values on the table)
all_eligible_params = list()
skewed_params = list()
num_maternal_trees = c(50, 25, 10, 5, 2, 1) #different number of maternal trees to be sampled for each scenario
#All same scenarios
x = 1 #x is the list counter variable that names each of the lists
for(i in 1:length(num_maternal_trees)) { #loops over the vector of maternal trees
for(j in 1:(250/num_maternal_trees[i])) { #loops ofrom 1 to max number number of seeds to sample per maternal tree
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), 1, 1) #All Same scenario--all seeds created from 1 pollen donor
all_same_params[[x]] = temp #saving the parameters to a list (list of lists)
x=x+1 #increment counter
}
}
#All eligible scenarios
x = 1
for(i in 1:length(num_maternal_trees)) { #loops over the vector of maternal trees
for(j in 1:(250/num_maternal_trees[i])) { #loops ofrom 1 to max number number of seeds to sample per maternal tree
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(rep((1/j), j))) #All Unique* scenario--each pollen donor has equal probability to pollinate seeds
all_eligible_params[[x]] = temp #saving parameters
x=x+1 #increment
}
}
#Skewed scenarios
x = 1
for(i in 1:length(num_maternal_trees)) { #loops over the vector of maternal trees
for(j in 1:(250/num_maternal_trees[i])) { #loops ofrom 1 to max number number of seeds to sample per maternal tree
#Skewed scenarios--multiple pollen donors, but 1 donates the majority of the pollen (80%), the rest have equal probability to donate
if(j==1) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), 1, 1) #if there's only one seed, it can't be skewed
} else if (j==2) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.8, 0.2)) # if only 2 pollen donors, then 1 80% and 1 20%
} else if (j==3) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.4, 0.4, 0.2))
} else if (j==4) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.4, 0.4, 0.1, 0.1))
} else if (j==5) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.4, 0.4, 0.1, 0.05, 0.05))
} else if (j>=6&&j<14) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.4, 0.4, 0.5, 0.5, rep((0.1/(j-4)), (j-4))))
} else if (j>=14) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), 14, c(0.4, 0.4, 0.5, 0.5, rep((0.1/10), (10)))) #cap on pollen donors is 14 total (such that the lowest probability to donate pollen is 1%)
}
skewed_params[[x]] = temp #saving parameters
x=x+1
}
}
#465 scenarios in each parameter list
#so 1395 scenarios total are created
#saving the list in an Rdata file
save(all_same_params, all_eligible_params, skewed_params, file="combined_list_params.Rdata")
load("combined_list_params.Rdata") #loading in function parameters defined in defining_function_parameters.R script
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#creating a container to store the results of sampling and other important data
# four columns to save the proportion of alleles captured, number of seeds sampled,
#number of trees sampled, and number of pollen donors (4 cols)
#each row indicates the scenario (465)
#the third dimension is the simulation replicate (10)
prop_capt_all_same = array(dim=c(465,4,10))
prop_capt_all_eligible = array(dim=c(465,4,10))
prop_capt_skewed = array(dim=c(465,4,10))
#list of genalex files for all simulation replicates--genalex files end in .csv
genalex_list = list.files(mydir, ".csv$")
i=1
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- the population data is not required for this
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
x=1
#call the function using that scenario and save data
temp = sample_seed(data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#save these results--save proportion of alleles captured in temp
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))
total = sum(sapply(data[3:42], n_distinct))
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured
prop_capt_all_same[x,2,i] = ((all_same_params[[x]][[1]])*(all_same_params[[x]][[2]][[1]]))#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,4,i] = (all_same_params[[x]][[3]]) #number of pollen donors
head(prop_capt_all_same)
head(prop_capt_all_same[,,1])
captured
total
382/471
#call sampling function here--save result in 3D matrix? (third dim. is for replicates?)
#for each element in scenario list--for 'all same' sampling (defined in parameters.R file)
for(x in 1:length(all_same_params)) {
#call the function using that scenario and save data
temp = sample_seed(data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#save these results--save proportion of alleles captured in temp
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))
total = sum(sapply(data[3:42], n_distinct))
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured
prop_capt_all_same[x,2,i] = ((all_same_params[[x]][[1]])*(all_same_params[[x]][[2]][[1]]))#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,4,i] = (all_same_params[[x]][[3]]) #number of pollen donors
}
head(prop_capt_all_same[,,1])
