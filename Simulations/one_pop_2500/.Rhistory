#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "alt"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R-scripts")
load(paste("quercus_fst_", version, ".Rdata", sep=""))
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "altern"
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R-scripts")
load(paste("quercus_fst_", version, ".Rdata", sep=""))
#creating an array to store all Fst results in
#dimensions 14 (14 species) by 3 (first column is mean Fst, second column is min Fst, third column is max Fst)
fst_results = array(0, dim = c(num_species,14))
for(j in 1:num_species) {
fst_results[j,] = rowMeans(mean_max_min_fst[,,j])
}
fst_results
#creating an array to store all Fst results in
#dimensions 14 (14 species) by 3 (first column is mean Fst, second column is min Fst, third column is max Fst)
fst_results = array(0, dim = c(num_species,14))
num_species=14
#creating an array to store all Fst results in
#dimensions 14 (14 species) by 3 (first column is mean Fst, second column is min Fst, third column is max Fst)
fst_results = array(0, dim = c(num_species,3))
for(j in 1:num_species) {
fst_results[j,] = rowMeans(mean_max_min_fst[,,j])
}
fst_results
####################################################################################################
#library functions
library(ggplot2)
load("combined_quercus_alt.Rdata")
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Allele_lim_change\\R-scripts")
load(paste("combined_quercus_", version, ".Rdata", sep=""))
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R-scripts")
#version variable keeps track of which version of simulation parameters you are working with
#orig = original
#alt = alternative
version = "orig"
load(paste("combined_quercus_", version, ".Rdata", sep=""))
View(combined_quercus_new)
################################################################################################
#combine original and alternative simulation results for a given species
#and create a column to keep track of simulation type
#plot curves for original vs. alternative sims
q_acer_results %>% filter(combined_quercus_new, species="Q. acerifolia")
################################################################################################
#combine original and alternative simulation results for a given species
#and create a column to keep track of simulation type
#plot curves for original vs. alternative sims
q_acer_results = combined_quercus_new %>% filter(species=="Q. acerifolia")
################################################################################################
#combine original and alternative simulation results for a given species
#and create a column to keep track of simulation type
#plot curves for original vs. alternative sims
q_acer_results = combined_quercus_new %>% filter(species=="Q. acerifolia")
library(dplyr)
################################################################################################
#combine original and alternative simulation results for a given species
#and create a column to keep track of simulation type
#plot curves for original vs. alternative sims
q_acer_results = combined_quercus_new %>% filter(species=="Q. acerifolia")
View(q_acer_results)
################################################################################################
#combine original and alternative simulation results for a given species
#and create a column to keep track of simulation type
#plot curves for original vs. alternative sims
setwd("C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/R-scripts")
load("combined_quercus_orig.Rdata")
q_acer_results_orig = combined_quercus_orig %>% filter(species=="Q. acerifolia")
q_acer_results_orig = combined_quercus_new %>% filter(species=="Q. acerifolia")
################################################################################################
#combine original and alternative simulation results for a given species
#and create a column to keep track of simulation type
#plot curves for original vs. alternative sims
setwd("C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/R-scripts")
load("combined_quercus_orig.Rdata")
q_acer_results_orig = combined_quercus_new %>% filter(species=="Q. acerifolia")
q_acer_results$simulation = "original"
#alternative
setwd("C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/R-scripts")
load("combined_quercus_alt.Rdata")
q_acer_results_orig = combined_quercus_new %>% filter(species=="Q. acerifolia")
q_acer_results$simulation = "alternative"
################################################################################################
#combine original and alternative simulation results for a given species
#and create a column to keep track of simulation type
#plot curves for original vs. alternative sims
#original
setwd("C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/R-scripts")
load("combined_quercus_orig.Rdata")
q_acer_results_orig = combined_quercus_new %>% filter(species=="Q. acerifolia")
q_acer_results_orig$simulation = "original"
View(q_acer_results_orig)
#alternative
setwd("C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/R-scripts")
load("combined_quercus_alt.Rdata")
q_acer_results_alt = combined_quercus_new %>% filter(species=="Q. acerifolia")
q_acer_results_alt$simulation = "alternative"
View(q_acer_results_alt)
combined_q_acer = rbind(q_acer_results_orig, q_acer_results_alt)
ggplot(combined_q_acer, aes(x=num_sampled, y=avg_prop_all, color=simulation)) +
geom_line()
all_same_params = list() #used for saving scenario parameters--ends up being a list of lists
#each scenario can be accessed using all_same_params[[x]] where x is the scenario desired (goes in order of the values on the table)
all_eligible_params = list()
skewed_params = list()
num_maternal_trees = c(50, 25, 10, 5, 2, 1) #different number of maternal trees to be sampled for each scenario
#All same scenarios
x = 1 #x is the list counter variable that names each of the lists
#this makes it easier to save the data, we can't use i because it only goes up to 5, and j varies each time it iterates
#x keeps track of the position in the list across each of the loops
for(i in 1:length(num_maternal_trees)) { #loops over the vector num_maternal_trees
for(j in 1:(250/num_maternal_trees[i])) { #loops from 1 to max number number of seeds to sample per maternal tree
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), 1, 1) #All Same scenario--all seeds created from 1 pollen donor
all_same_params[[x]] = temp #saving the parameters to a list (list of lists)
x=x+1 #increment counter
}
}
#All eligible scenarios
x = 1 #x is the list counter variable that names each of the lists
#this makes it easier to save the data, we can't use i because it only goes up to 5, and j varies each time it iterates
#x keeps track of the position in the list across each of the loops
for(i in 1:length(num_maternal_trees)) { #loops over the vector of maternal trees
for(j in 1:(250/num_maternal_trees[i])) { #loops ofrom 1 to max number number of seeds to sample per maternal tree
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(rep((1/j), j))) #All Unique* scenario--each pollen donor has equal probability to pollinate seeds
all_eligible_params[[x]] = temp #saving parameters
x=x+1 #increment
}
}
#Skewed scenarios
x = 1#x is the list counter variable that names each of the lists
#this makes it easier to save the data, we can't use i because it only goes up to 5, and j varies each time it iterates
#x keeps track of the position in the list across each of the loops
for(i in 1:length(num_maternal_trees)) { #loops over the vector of maternal trees
for(j in 1:(250/num_maternal_trees[i])) { #loops ofrom 1 to max number number of seeds to sample per maternal tree
#we have multiple different donor scenarios for skewed donation
if(j==1) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), 1, 1) #if there's only one seed, it can't be skewed, so it donates 100% pollen
} else if (j==2) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.8, 0.2)) # if only 2 pollen donors, then 1 80% and 1 20%
} else if (j==3) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.4, 0.4, 0.2)) #if 3 donors, then 2 donate 40%, and 1 donates 20%
} else if (j==4) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.4, 0.4, 0.1, 0.1)) #if 4 donors, 40%, 40%, 10% and 10%
} else if (j==5) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.4, 0.4, 0.1, 0.05, 0.05)) #if 5 donors, 40%, 40%, 10%, 5%, 5%
} else if (j>=6&&j<14) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), j, c(0.4, 0.4, 0.05, 0.05, rep((0.1/(j-4)), (j-4)))) #if 6 or more donors (up to 13), then two donate 40%, two donate 5%, and the remaining 10% is split evenly among donors
} else if (j>=14) {
temp = list(num_maternal_trees[i], c(rep(j, (num_maternal_trees[i]))), 14, c(0.4, 0.4, 0.05, 0.05, rep((0.1/10), (10)))) #if 14 or more donors, two donate 40%, two donate 5% and the remaining 10% is split evenly among 10 donors--
#cap on pollen donors is 14 total (such that the lowest probability to donate pollen is 1%)
}
skewed_params[[x]] = temp #saving parameters
x=x+1
}
}
#465 scenarios in each parameter list
#so 1395 scenarios total are created
#saving the list in an Rdata file
save(all_same_params, all_eligible_params, skewed_params, file="combined_list_params.Rdata")
combined_list_params_skewed = list()
num_maternal_trees_skewed = c(50, 25, 10, 5, 5, 2)
#50 maternal trees
x = 1
total_seeds = c(seq(100, 200, by=50)) #manually saving the number of seeds total to sample
for(i in 1:3) {
temp = list(num_maternal_trees_skewed[1], c((0.51*total_seeds[i]), rep((0.01*total_seeds[i]), 49)), 1, 1) #All same
combined_list_params_skewed[[x]] = temp #saving parameters
x=x+1
temp = list(num_maternal_trees_skewed[1], c((0.51*total_seeds[i]), rep((0.01*total_seeds[i]), 49)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i]))) #All unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[1], c((0.51*total_seeds[i]), rep((0.01*total_seeds[i]), 49)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1))))
combined_list_params_skewed[[x]] = temp
x=x+1
}
#25 maternal trees
total_seeds = c(seq(50, 200, by=50))
for(i in 1:4) {
temp = list(num_maternal_trees_skewed[2], c((0.52*total_seeds[i]), rep((0.02*total_seeds[i]), 24)), 1, 1) #all same
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[2], c((0.52*total_seeds[i]), rep((0.02*total_seeds[i]), 24)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i]))) #all unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[2], c((0.52*total_seeds[i]), rep((0.02*total_seeds[i]), 24)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1)))) #skewed
combined_list_params_skewed[[x]] = temp
x=x+1
}
#10 maternal trees
total_seeds = c(seq(20, 200, by=20))
for(i in 1:10) {
temp = list(num_maternal_trees_skewed[3], c((0.5*total_seeds[i]), (0.1*total_seeds[i]), rep((0.05*total_seeds[i]), 8)), 1, 1)
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[3], c((0.5*total_seeds[i]), (0.1*total_seeds[i]), rep((0.05*total_seeds[i]), 8)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i])))
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[3], c((0.5*total_seeds[i]), (0.1*total_seeds[i]), rep((0.05*total_seeds[i]), 8)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1))))
combined_list_params_skewed[[x]] = temp
x=x+1
}
#5 maternal trees--max 80% skew
total_seeds = c(seq(20,200,by=20))
for(i in 1:10) {
temp = list(num_maternal_trees_skewed[4], c((0.8*total_seeds[i]), rep((0.05*total_seeds[i]), 4)), 1, 1) #all same
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[5], c((0.8*total_seeds[i]), rep((0.05*total_seeds[i]), 4)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i])))
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[5], c((0.8*total_seeds[i]), rep((0.05*total_seeds[i]), 4)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1))))
combined_list_params_skewed[[x]] = temp
x=x+1
}
#5 maternal trees--max 50% skew
total_seeds = c(seq(10,200,by=10))
for(i in 1:20) {
temp = list(num_maternal_trees_skewed[5], c((0.5*total_seeds[i]), (0.2*total_seeds[i]), rep((0.1*total_seeds[i]), 3)), 1, 1)#all same
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[5], c((0.5*total_seeds[i]), (0.2*total_seeds[i]), rep((0.1*total_seeds[i]), 3)), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i])))#all unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[5], c((0.5*total_seeds[i]), (0.2*total_seeds[i]), rep((0.1*total_seeds[i]), 3)), total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1))))#skewed
combined_list_params_skewed[[x]] = temp
x=x+1
}
#2 maternal trees
total_seeds = c(seq(5,200,by=5))
for(i in 1:40) {
temp = list(num_maternal_trees_skewed[6], c((0.8*total_seeds[i]), (0.2*total_seeds[i])), 1, 1) # all same
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[6], c((0.8*total_seeds[i]), (0.2*total_seeds[i])), total_seeds[i], c(rep((1/total_seeds[i]), total_seeds[i]))) # all unique
combined_list_params_skewed[[x]] = temp
x=x+1
temp = list(num_maternal_trees_skewed[6], c((0.8*total_seeds[i]), (0.2*total_seeds[i])),  total_seeds[i], c(0.8, rep((0.2/total_seeds[i]), (total_seeds[i]-1)))) # skewed
combined_list_params_skewed[[x]] = temp
x=x+1
}
#combined_list_params_skewed ends up having 261 elements
#so 261 scenarios are created
#saving the list in an Rdata file
save(combined_list_params_skewed, file="combined_list_params_skewed.Rdata")
##################################################################################
#Library functions
library(adegenet)
library(diveRsity)
library(poppr)
library(tidyr)
library(dplyr)
#including R-script containing functions used for import, conversions, and sampling
source("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts/import_seed_functions.R")
#including edited arp2gen function
source("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts/arp2gen_edit.R")
#defining the working directory containing simulation files
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500"
setwd(mydir)
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#importing and converting genepop files to genalex
import_gen2genalex_files(mydir, ".gen$")
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims/R-scripts")
load("combined_list_params.Rdata") #loading in function parameters defined in defining_function_parameters.R script
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#creating a container to store the results of sampling and other important data
# five columns to save the proportion of alleles captured, number of seeds sampled,
#number of trees sampled, and number of pollen donors, and the donor type (5 cols)
#each row indicates the scenario (465)
#the third dimension is the simulation replicate (10)
#saving each of the pollen donor scenarios in different arrays--we can combine them later if we need to!
#this is just easier because it's less filtering and more organized
prop_capt_all_same = array(dim=c(465,5,1000))
prop_capt_all_eligible = array(dim=c(465,5,1000))
prop_capt_skewed = array(dim=c(465,5,1000))
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
setwd(mydir)
genalex_list
#Main loop overview:
#for every simulation replicate, process data to be usable for the function
#then, we have three separate loops, that loop over the parameters created in defining_function_parameters.R
#there are three separate loops for the three pollen donor scnearios (skewed, all eligble, and all same)
#calculate proportion of alleles captured by
#finally, save results (prop. alleles capt, number seeds sampled, number trees sampled, and number pollen donors)
for(i in 1:length(genalex_list)) {
#first import and process the data
#import genalex files as dataframe
data = read.csv(genalex_list[[i]], header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
data = data[-2,]
data = data[-1,]
#giving the dataframe columns new names
names(data) = c("Ind", "Pop", loci_names)
data = data[-1,] #removing the first row -- repeat of now column headers
#All same pollen scenarios
#for each element in scenario list--for 'all same' sampling (defined in defining_function_parameters.R file)
for(x in 1:length(all_same_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct)) #counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured = captured/total, save these results
prop_capt_all_same[x,2,i] = ((all_same_params[[x]][[1]])*(all_same_params[[x]][[2]][[1]]))#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,4,i] = (all_same_params[[x]][[3]]) #number of pollen donors
prop_capt_all_same[x,5,i] = "all_same"
}
#'all eligible' sampling
for(x in 1:length(all_eligible_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct))#counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_all_eligible[x,1,i] = (captured/total) #proportion of alleles captured= captured/total
prop_capt_all_eligible[x,2,i] = ((all_eligible_params[[x]][[1]])*(all_eligible_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_all_eligible[x,3,i] = (all_eligible_params[[x]][[1]]) #number of trees sampled
prop_capt_all_eligible[x,4,i] = (all_eligible_params[[x]][[3]]) #number of pollen donors
prop_capt_all_eligible[x,5,i] = "all_eligible"
}
#skewed sampling
for(x in 1:length(skewed_params)) {
temp = sample_seed(data, skewed_params[[x]][[1]], skewed_params[[x]][[2]], skewed_params[[x]][[3]], skewed_params[[x]][[4]])
#calculating proportion of alleles captured
#n_distinct counts all distinct values in a column -- we want to sum this across multiple columns, so that's where sum and sapply come in
captured = sum(sapply(temp[1:40], n_distinct))#counting the number of distinct alleles in temp--the function return, which does the sampling
total = sum(sapply(data[3:42], n_distinct)) #counting number of distinct alleles in data, which contains all the alleles in the population
prop_capt_skewed[x,1,i] = (captured/total)#proportion of alleles captured = captured/ total
prop_capt_skewed[x,2,i] = ((skewed_params[[x]][[1]])*(skewed_params[[x]][[2]][[1]]))#total seeds sampled
prop_capt_skewed[x,3,i] = (skewed_params[[x]][[1]]) #number of trees sampled
prop_capt_skewed[x,4,i] = (skewed_params[[x]][[3]]) #number of pollen donors
prop_capt_skewed[x,5,i] = "skewed"
}
}
