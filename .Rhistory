scale_colour_manual(values=cbPalette, labels = c("All eligible", "All same", "Skewed")) +
labs(color = "Donor Type")
head(tidy_df_realistic)
#Running the model
transformed_model = glm(prop_capt ~ total_seeds * maternal_trees * donor_type,
weights=total_seeds, family = binomial(link='logit'), data = tidy_df)
gc()
##################################################################################
#Library functions
library(adegenet)
library(diveRsity)
library(poppr)
library(tidyr)
library(dplyr)
###MAKE SURE TO LOAD IN THE CORRECT DATA
load("R-scripts/combined_list_params_ideal.Rdata") #loading in function parameters defined in defining_function_parameters.R script
#including R-script containing functions used for import, conversions, and sampling
source("R-scripts/import_seed_functions.R")
#including edited arp2gen function
source("R-scripts/arp2gen_edit.R")
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
i=1
print(paste("replicate number ", i))
#first import and process the data
#import genalex files as dataframe
genetic_data = read.csv(paste(mydir, genalex_list[[i]], sep=""), header=FALSE)
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
length(genalex_list)
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims")
###MAKE SURE TO LOAD IN THE CORRECT DATA
load("R-scripts/combined_list_params_ideal.Rdata") #loading in function parameters defined in defining_function_parameters.R script
#including R-script containing functions used for import, conversions, and sampling
source("R-scripts/import_seed_functions.R")
#including edited arp2gen function
source("R-scripts/arp2gen_edit.R")
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
getwd()
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/OneDrive/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
print(paste("replicate number ", i))
#first import and process the data
#import genalex files as dataframe
genetic_data = read.csv(paste(mydir, genalex_list[[i]], sep=""), header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
genetic_data = genetic_data[-2,]
genetic_data = genetic_data[-1,]
#giving the dataframe columns new names
names(genetic_data) = c("Ind", "Pop", loci_names)
genetic_data = genetic_data[-1,] #removing the first row -- repeat of now column headers
#calculating the number of alleles present in the parental dataset--we only need to do this once for each replicate
total = 0  #sum to keep track of total alleles
k=3 #counter variable for column (locus) of parental dataset
###MAKE SURE TO LOAD IN THE CORRECT DATA
#load("R-scripts/combined_list_params_ideal.Rdata") #loading in function parameters defined in defining_function_parameters.R script
load("R-scripts/combined_list_params_realistic.Rdata")
###MAKE SURE TO LOAD IN THE CORRECT DATA
#load("R-scripts/combined_list_params_ideal.Rdata") #loading in function parameters defined in defining_function_parameters.R script
load("../../R-scripts/combined_list_params_realistic.Rdata")
for(z in 1:num_loci){
parental_allele_list = table(c(as.matrix(genetic_data[,k:(k+1)]))) #getting alleles and their frequencies for locus i in parental dataframe
#parental_allele_list = parental_allele_list[parental_allele_list>3] #subsetting parental data to only include alleles with frequency greater than 3
total_names = names(parental_allele_list)
total = total + n_distinct(total_names) #getting the number of distinct values for locus 1 to count alleles
k = k+2 #increment k for next loop iteration
}
x=1
all_same_params[1]
all_eligible_params[1]
#including R-script containing functions used for import, conversions, and sampling
source("../../R-scripts/import_seed_functions.R")
x
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#including R-script containing functions used for import, conversions, and sampling
source("../../R-scripts/import_seed_functions.R")
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
all_eligible_params[1]
all_eligible_params[1][2]
all_eligible_params[1][3]
all_eligible_params[[1]][[2]]
all_eligible_params[[1]][[3]]
all_eligible_params[[1]][[2]]
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
##################################################################################
#Library functions
library(adegenet)
library(diveRsity)
library(poppr)
library(tidyr)
library(dplyr)
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims")
###MAKE SURE TO LOAD IN THE CORRECT DATA
#load("R-scripts/combined_list_params_ideal.Rdata") #loading in function parameters defined in defining_function_parameters.R script
load("R-scripts/combined_list_params_realistic.Rdata")
#including R-script containing functions used for import, conversions, and sampling
source("R-scripts/import_seed_functions.R")
#including edited arp2gen function
source("R-scripts/arp2gen_edit.R")
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/OneDrive/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#realistic scenarios--we have different numbers of scenarios for each
prop_capt_all_same = array(dim=c(217,7,50))
prop_capt_all_eligible = array(dim=c(217,7,50))
prop_capt_skewed = array(dim=c(217,7,50))
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
i=1
print(paste("replicate number ", i))
#first import and process the data
#import genalex files as dataframe
genetic_data = read.csv(paste(mydir, genalex_list[[i]], sep=""), header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
genetic_data = genetic_data[-2,]
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
genalex_list
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle//Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
genalex_list
#first import and process the data
#import genalex files as dataframe
genetic_data = read.csv(paste(mydir, genalex_list[[i]], sep=""), header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
genetic_data = genetic_data[-2,]
genetic_data = genetic_data[-1,]
#giving the dataframe columns new names
names(genetic_data) = c("Ind", "Pop", loci_names)
genetic_data = genetic_data[-1,] #removing the first row -- repeat of now column headers
#calculating the number of alleles present in the parental dataset--we only need to do this once for each replicate
total = 0  #sum to keep track of total alleles
k=3 #counter variable for column (locus) of parental dataset
for(z in 1:num_loci){
parental_allele_list = table(c(as.matrix(genetic_data[,k:(k+1)]))) #getting alleles and their frequencies for locus i in parental dataframe
#parental_allele_list = parental_allele_list[parental_allele_list>3] #subsetting parental data to only include alleles with frequency greater than 3
total_names = names(parental_allele_list)
total = total + n_distinct(total_names) #getting the number of distinct values for locus 1 to count alleles
k = k+2 #increment k for next loop iteration
}
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
x=1
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#Load libraries required for the whole script
library(rstanarm)
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
source("hpdi.R")
#Load in data
load("tidy_df.Rdata")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
#Running the model
transformed_model = glm(prop_capt ~ total_seeds * maternal_trees * donor_type,
weights=total_seeds, family = binomial(link='logit'), data = tidy_df)
#Running the model
transformed_model = glm(prop_capt ~ total_seeds * maternal_trees * donor_type,
weights=total_seeds, family = binomial(link='logit'), data = tidy_df)
# #Save the model since it takes so long to run
save(transformed_model, file = "transformed_model.Rdata")
#Load the model from previously saved run
load("transformed_model.Rdata")
```{r}
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
View(preds)
colSums(preds != 0 )
colSums(preds != NA )
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=log(total_seeds), y=pmu, lty=donor_type)) +
ylim(0,1) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylim(0,1) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
#Running the model
transformed_model = glm(prop_capt ~ log(total_seeds) * maternal_trees * donor_type,
weights=total_seeds, family = binomial(link='logit'), data = tidy_df)
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylim(0,1) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
#Running the model
transformed_model = glm(prop_capt ~ log(total_seeds) * maternal_trees * donor_type,
weights=total_seeds, data = tidy_df)
# #Save the model since it takes so long to run
save(transformed_model, file = "transformed_model.Rdata")
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylim(0,1) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
#Running the model
transformed_model = glm(prop_capt ~ log(total_seeds) * maternal_trees * donor_type, data = tidy_df) #removed weights=total_seeds
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylim(0,1) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
library(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
library(ggplot2)
theme_set(theme_bw())
source("hpdi.R")
#Load in data
load("tidy_df.Rdata")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
#Running the model
transformed_model = glm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = tidy_df) #removed weights=total_seeds
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylim(0,1) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
library(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
#Load in data
load("tidy_df.Rdata")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
#Running the model
transformed_model = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = tidy_df) #removed weights=total_seeds
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylim(0,1) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
library(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
source("hpdi.R")
#Load in data
load("tidy_df.Rdata")
#Converting these to numeric--they already should be, but they must have been converted accidentally when making the matrix a dataframe, etc...
tidy_df$prop_capt = as.numeric(tidy_df$prop_capt)
tidy_df$total_seeds = as.numeric(tidy_df$total_seeds)
tidy_df$maternal_trees = as.numeric(tidy_df$maternal_trees)
# #Save the model since it takes so long to run
save(transformed_model, file = "transformed_model.Rdata")
#Running the model
transformed_model = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = tidy_df) #removed weights=total_seeds
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
#Model summary!
summary(transformed_model, digits = 4)
#Running the model
transformed_model = lm(prop_capt ~ log(total_seeds) + log(maternal_trees) + donor_type, data = tidy_df) #removed weights=total_seeds
#Model summary!
summary(transformed_model, digits = 4)
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
#Running the model
transformed_model = lm(prop_capt ~ log(total_seeds) * log(maternal_trees) * donor_type, data = tidy_df) #removed weights=total_seeds
#Creating a new dataframe of values to base predictions on
newd = data.frame(maternal_trees=(rep(c(1,2,5,10,25,50,100), each=1500)), total_seeds=rep(seq(1,500,1),21), donor_type=factor(rep((rep(c("all_eligible", "all_same", "skewed"), each=500)), 7)))
#Predictions
pmu = predict(transformed_model, re.form=NA, transform = TRUE, newdata=newd)
#Creating a dataframe to plot in ggplot
preds <- cbind(newd, pmu)
#Plotting the data
ggplot(data=preds) +
geom_point(data = tidy_df, aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type), alpha=0.25) +
facet_wrap(vars(maternal_trees)) +
geom_line(mapping = aes(x=total_seeds, y=pmu, lty=donor_type)) +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled")
##################################################################################
#Library functions
library(adegenet)
library(diveRsity)
library(poppr)
library(tidyr)
library(dplyr)
setwd("C:/Users/kayle/OneDrive/Documents/Pollen_dispersal_sims")
#including R-script containing functions used for import, conversions, and sampling
source("R-scripts/import_seed_functions.R")
#including edited arp2gen function
source("R-scripts/arp2gen_edit.R")
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#realistic scenarios--we have different numbers of scenarios for each
prop_capt_all_same = array(dim=c(217,7,50))
prop_capt_all_eligible = array(dim=c(217,7,50))
prop_capt_skewed = array(dim=c(217,7,50))
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
i=1
print(paste("replicate number ", i))
#first import and process the data
#import genalex files as dataframe
genetic_data = read.csv(paste(mydir, genalex_list[[i]], sep=""), header=FALSE)
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/OneDrive/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
print(paste("replicate number ", i))
i=1
print(paste("replicate number ", i))
#first import and process the data
#import genalex files as dataframe
genetic_data = read.csv(paste(mydir, genalex_list[[i]], sep=""), header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
genetic_data = genetic_data[-2,]
genetic_data = genetic_data[-1,]
#giving the dataframe columns new names
names(genetic_data) = c("Ind", "Pop", loci_names)
genetic_data = genetic_data[-1,] #removing the first row -- repeat of now column headers
View(genetic_data)
#calculating the number of alleles present in the parental dataset--we only need to do this once for each replicate
total = 0  #sum to keep track of total alleles
k=3 #counter variable for column (locus) of parental dataset
for(z in 1:num_loci){
parental_allele_list = table(c(as.matrix(genetic_data[,k:(k+1)]))) #getting alleles and their frequencies for locus i in parental dataframe
#parental_allele_list = parental_allele_list[parental_allele_list>3] #subsetting parental data to only include alleles with frequency greater than 3
total_names = names(parental_allele_list)
total = total + n_distinct(total_names) #getting the number of distinct values for locus 1 to count alleles
k = k+2 #increment k for next loop iteration
}
total
