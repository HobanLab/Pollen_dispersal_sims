#finally, save results (prop. alleles capt, number seeds sampled, number trees sampled, and number pollen donors)
for(i in 1:length(genalex_list)) {
print(paste("replicate number ", i))
#first import and process the data
#import genalex files as dataframe
genetic_data = read.csv(paste(mydir, genalex_list[[i]], sep=""), header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
genetic_data = genetic_data[-2,]
genetic_data = genetic_data[-1,]
#giving the dataframe columns new names
names(genetic_data) = c("Ind", "Pop", loci_names)
genetic_data = genetic_data[-1,] #removing the first row -- repeat of now column headers
#calculating the number of alleles present in the parental dataset--we only need to do this once for each replicate
total = 0  #sum to keep track of total alleles
k=3 #counter variable for column (locus) of parental dataset
for(z in 1:num_loci){
parental_allele_list = table(c(as.matrix(genetic_data[,k:(k+1)]))) #getting alleles and their frequencies for locus i in parental dataframe
#parental_allele_list = parental_allele_list[parental_allele_list>3] #subsetting parental data to only include alleles with frequency greater than 3
total_names = names(parental_allele_list)
total = total + n_distinct(total_names) #getting the number of distinct values for locus 1 to count alleles
k = k+2 #increment k for next loop iteration
}
#All same pollen scenarios
#for each element in scenario list--for 'all same' sampling (defined in defining_function_parameters.R file)
for(x in 1:length(all_same_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_same_params[[x]][[1]], all_same_params[[x]][[2]], all_same_params[[x]][[3]], all_same_params[[x]][[4]])
#calculating proportion of alleles captured
captured = 0 #sum to keep track of alleles captured by sampling
j=1 #counter variable to column (locus) of seed dataset
for(z in 1:num_loci) {
seed_allele_list = table(c(as.matrix(temp[,j:(j+1)]))) #getting unique values for locus i in seed dataframe
captured_names = names(seed_allele_list)#getting the names of the alleles captured from sampling
captured = captured + n_distinct(captured_names)#making sure none of the super rare alleles excluded from parental dataset are included here
j = j+2 #increment j for next loop iteration
}
prop_capt_all_same[x,1,i] = (captured/total)#proportion of alleles captured = captured/total, save these results
prop_capt_all_same[x,2,i] = sum(all_same_params[[x]][[2]])#total seeds sampled --if possible, change all_same_params[[x]][[2]][[1]] hard coding
prop_capt_all_same[x,3,i] = (all_same_params[[x]][[1]]) #number of trees sampled
prop_capt_all_same[x,5,i] = captured
#clearing out containers
rm(captured_names)
rm(seed_allele_list)
rm(temp)
}
#defining these columns with vectors to speed up code
prop_capt_all_same[,4,i] = "all_same"
prop_capt_all_same[,6,i] = total
prop_capt_all_same[,7,i] = i
#'all eligible' sampling
for(x in 1:length(all_eligible_params)) {
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#calculating proportion of alleles captured
#calculating proportion of alleles captured
captured = 0 #sum to keep track of alleles captured by sampling
j=1 #counter variable to column (locus) of seed dataset
for(z in 1:num_loci) {
seed_allele_list = table(c(as.matrix(temp[,j:(j+1)]))) #getting unique values for locus i in seed dataframe
captured_names = names(seed_allele_list)#getting the names of the alleles captured from sampling
captured = captured + n_distinct(captured_names)#making sure none of the super rare alleles excluded from parental dataset are included here
j = j+2 #increment j for next loop iteration
}
prop_capt_all_eligible[x,1,i] = (captured/total) #proportion of alleles captured= captured/total
prop_capt_all_eligible[x,2,i] = sum(all_eligible_params[[x]][[2]])#total seeds sampled
prop_capt_all_eligible[x,3,i] = (all_eligible_params[[x]][[1]]) #number of trees sampled
prop_capt_all_eligible[x,5,i] = captured
#clearing out containers
rm(captured_names)
rm(seed_allele_list)
rm(temp)
}
prop_capt_all_eligible[,4,i] = "all_eligible"
prop_capt_all_eligible[,6,i] = total
prop_capt_all_eligible[,7,i] = i
#skewed sampling
for(x in 1:length(skewed_params)) {
temp = sample_seed(genetic_data, skewed_params[[x]][[1]], skewed_params[[x]][[2]], skewed_params[[x]][[3]], skewed_params[[x]][[4]])
#calculating proportion of alleles captured
captured = 0 #sum to keep track of alleles captured by sampling
j=1 #counter variable to column (locus) of seed dataset
for(z in 1:num_loci) {
seed_allele_list = table(c(as.matrix(temp[,j:(j+1)]))) #getting unique values for locus i in seed dataframe
captured_names = names(seed_allele_list)#getting the names of the alleles captured from sampling
captured = captured + n_distinct(captured_names)#making sure none of the super rare alleles excluded from parental dataset are included here
j = j+2 #increment j for next loop iteration
}
prop_capt_skewed[x,1,i] = (captured/total)#proportion of alleles captured = captured/ total
prop_capt_skewed[x,2,i] = sum(skewed_params[[x]][[2]])#total seeds sampled
prop_capt_skewed[x,3,i] = (skewed_params[[x]][[1]]) #number of trees sampled
prop_capt_skewed[x,5,i] = captured
#clearing out containers
rm(captured_names)
rm(seed_allele_list)
rm(temp)
}
prop_capt_skewed[,4,i] = "skewed"
prop_capt_skewed[,6,i] = total
prop_capt_skewed[,7,i] = i
rm(total_names)
rm(parental_allele_list)
}
colnames(prop_capt_all_same) = c("prop_capt", "total_seeds", "maternal_trees", "donor_type", "num_capt", "total_alleles", "replicate")
colnames(prop_capt_all_eligible) = c("prop_capt", "total_seeds", "maternal_trees",  "donor_type", "num_capt", "total_alleles", "replicate")
colnames(prop_capt_skewed) = c("prop_capt", "total_seeds", "maternal_trees", "donor_type", "captured", "total_alleles", "replicate")
#saving realistic results to Rdata file
save(prop_capt_all_same, prop_capt_all_eligible, prop_capt_skewed, file="R-scripts/alleles_capt_realistic_onepop.Rdata")
getwd()
#saving realistic results to Rdata file
save(prop_capt_all_same, prop_capt_all_eligible, prop_capt_skewed, file="../../R-scripts/alleles_capt_realistic_onepop.Rdata")
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_bw())
#Ideal
#load("alleles_capt_ideal_onepop.Rdata")
#Realistic
load("alleles_capt_realistic_onepop.Rdata")
same_long=NULL
eligible_long=NULL
skewed_long=NULL
j=1
for(i in 1:50) {
temp = rbind(prop_capt_all_same[,,j], prop_capt_all_same[,,(j+1)])
same_long = rbind(same_long, temp)
j = j+2
if(j>50) {break}
}
j=1
for(i in 1:50) {
temp = rbind(prop_capt_all_eligible[,,j], prop_capt_all_eligible[,,(j+1)])
eligible_long = rbind(eligible_long, temp)
j = j+2
if(j>50) {break}
}
j=1
for(i in 1:50) {
temp = rbind(prop_capt_skewed[,,j], prop_capt_skewed[,,(j+1)])
skewed_long = rbind(skewed_long, temp)
j = j+2
if(j>50) {break}
}
rm(temp)
tidy_df = rbind(same_long, eligible_long, skewed_long)
tidy_df = as.data.frame(tidy_df)
tidy_df = rbind(same_long, eligible_long, skewed_long)
tidy_df = as.data.frame(tidy_df)
#' Just adding a column indicating the number of failures (number of alleles not captured) for binomial data
tidy_df$num_fails = c(as.numeric(tidy_df$total_alleles) - as.numeric(tidy_df$num_capt))
View(tidy_df)
View(prop_capt_all_same)
colnames(prop_capt_all_same) = c("prop_capt", "total_seeds", "maternal_trees", "donor_type", "num_capt", "total_alleles", "replicate")
getwd()
#Ideal
#load("alleles_capt_ideal_onepop.Rdata")
#Realistic
load("../../R-scripts/alleles_capt_realistic_onepop.Rdata")
View(prop_capt_all_same[,,1])
same_long=NULL
eligible_long=NULL
skewed_long=NULL
j=1
for(i in 1:50) {
temp = rbind(prop_capt_all_same[,,j], prop_capt_all_same[,,(j+1)])
same_long = rbind(same_long, temp)
j = j+2
if(j>50) {break}
}
j=1
for(i in 1:50) {
temp = rbind(prop_capt_all_eligible[,,j], prop_capt_all_eligible[,,(j+1)])
eligible_long = rbind(eligible_long, temp)
j = j+2
if(j>50) {break}
}
j=1
for(i in 1:50) {
temp = rbind(prop_capt_skewed[,,j], prop_capt_skewed[,,(j+1)])
skewed_long = rbind(skewed_long, temp)
j = j+2
if(j>50) {break}
}
rm(temp)
tidy_df = rbind(same_long, eligible_long, skewed_long)
tidy_df = as.data.frame(tidy_df)
tidy_df = rbind(same_long, eligible_long, skewed_long)
tidy_df = as.data.frame(tidy_df)
#' Just adding a column indicating the number of failures (number of alleles not captured) for binomial data
tidy_df$num_fails = c(as.numeric(tidy_df$total_alleles) - as.numeric(tidy_df$num_capt))
save(tidy_df, file="tidy_df_realistic.Rdata")
getwd()
save(tidy_df, file="../../R-scripts/Rdata/tidy_df_realistic.Rdata")
#Load in data
load("tidy_df_realistic.Rdata")
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#E69F00", "#56B4E9", "#CC79A7")
#defining more descriptive labels for the facets
mat_tree_labs = c("1 maternal tree", "2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees")
names(mat_tree_labs) = c("1", "2", "5", "10", "25", "50", "100")
tidy_df %>%
ggplot(aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type)) +
geom_point() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture across all sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "All same", "Skewed")) +
labs(color = "Donor Type")
tidy_df %>%
filter(total_seeds==200) %>%
ggplot(aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for ideal scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "All same", "Skewed")) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(color = "Donor Type")
tidy_df %>%
filter(total_seeds==400) %>%
ggplot(aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type)) +
geom_boxplot(alpha=0.25) +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for ideal scenarios with 400 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "All same", "Skewed")) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(color = "Donor Type")
tidy_df_realistic = tidy_df
#Combine dataframes
tidy_df$samp_type = "ideal"
load("tidy_df.Rdata")
load("tidy_df.Rdata")
#Combine dataframes
tidy_df$samp_type = "ideal"
tidy_df_realistic$samp_type = "realistic"
head(tidy_df)
head(tidy_df_realistic)
#Combine dataframes
combined_ideal_real = rbind(tidy_df, tidy_df_realistic)
load("tidy_df.Rdata")
#remove col to make same # cols
tidy_df = subset(tidy_df, select = -c(seeds_per_tree))
head(tidy_df)
#Create new columns to identify scenarios
tidy_df$samp_type = "ideal"
tidy_df_realistic$samp_type = "realistic"
head(tidy_df)
head(tidy_df_realistic)
ncol(tidy_df)
ncol(tidy_df_realistic)
#Combine dataframes
combined_ideal_real = rbind(tidy_df, tidy_df_realistic)
head(combined_ideal_real)
tidy_df %>%
filter(total_seeds==200) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=donor_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for ideal scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "All same", "Skewed")) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(color = "Donor Type")
tidy_df_realistic %>%
filter(total_seeds==400) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=donor_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for realistic scenarios with 400 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "All same", "Skewed")) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(color = "Donor Type")
combined_ideal_real %>%
filter(total_seeds==200) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=samp_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "All same", "Skewed")) +
labs(color = "Donor Type")
combined_ideal_real %>%
filter(total_seeds==200) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=samp_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
labs(color = "Donor Type")
combined_ideal_real %>%
filter(total_seeds==200) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=samp_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
labs(color = "Sampling Type")
combined_ideal_real %>%
filter(total_seeds==200) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=samp_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for ideal and realistic scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
labs(color = "Sampling Type")
total
combined_ideal_real %>%
filter(total_seeds==200) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=samp_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
labs(color = "Sampling Type")
combined_ideal_real %>%
filter(total_seeds==200) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=samp_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
labs(color = "Sampling Type") +
scale_x_discrete(limits=c("Eligible","Same","Skewed"))
combined_ideal_real %>%
filter(total_seeds==200) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=samp_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
labs(color = "Sampling Type") +
scale_x_discrete(labels=c("Eligible","Same","Skewed"))
combined_ideal_real %>%
filter(total_seeds==200) %>%
filter(maternal_trees>1) %>%
ggplot(aes(x=donor_type, y=as.numeric(prop_capt), color=samp_type)) +
geom_boxplot() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture for scenarios with 200 total seeds sampled") +
xlab("Donor type") +
ylab("Proportion of alleles captured") +
labs(color = "Sampling Type") +
scale_x_discrete(labels=c("Eligible","Same","Skewed"))
#defining a color palette to use for the plots (color-blind accessible)
cbPalette <- c("#E69F00", "#56B4E9", "#CC79A7")
#defining more descriptive labels for the facets
mat_tree_labs = c("1 maternal tree", "2 maternal trees", "5 maternal trees", "10 maternal trees", "25 maternal trees", "50 maternal trees", "100 maternal trees")
names(mat_tree_labs) = c("1", "2", "5", "10", "25", "50", "100")
tidy_df %>%
ggplot(aes(x=as.numeric(total_seeds), y=as.numeric(prop_capt), color=donor_type)) +
geom_point() +
facet_wrap(vars(as.numeric(maternal_trees)), labeller = labeller(maternal_trees = mat_tree_labs)) +
theme(strip.background = element_rect(color="black", fill="#F2F2F2", linetype="solid")) +
ylim(0,1) +
ggtitle("Genetic diversity capture across all ideal sampling scenarios") +
ylab("Proportion of alleles captured") +
xlab("Total seeds sampled") +
scale_colour_manual(values=cbPalette, labels = c("All eligible", "All same", "Skewed")) +
labs(color = "Donor Type")
head(tidy_df_realistic)
#Running the model
transformed_model = glm(prop_capt ~ total_seeds * maternal_trees * donor_type,
weights=total_seeds, family = binomial(link='logit'), data = tidy_df)
gc()
##################################################################################
#Library functions
library(adegenet)
library(diveRsity)
library(poppr)
library(tidyr)
library(dplyr)
###MAKE SURE TO LOAD IN THE CORRECT DATA
load("R-scripts/combined_list_params_ideal.Rdata") #loading in function parameters defined in defining_function_parameters.R script
#including R-script containing functions used for import, conversions, and sampling
source("R-scripts/import_seed_functions.R")
#including edited arp2gen function
source("R-scripts/arp2gen_edit.R")
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
num_loci = 20 #number of loci simulated, needed to make a dataframe to save the data
#defining array to store seeds that collectors have 'sampled'
#first we need to create column names depending on how many loci are present in simulations
#then, define the matrix, convert to dataframe, and rename the columns to label the data
#this dataframe keeps track of the alleles that are captured during sampling
loci_names = c()
for(i in 1:num_loci){
loci_names = c(loci_names, paste("locus", i, "a", sep=""))
loci_names = c(loci_names, paste("locus", i, "b", sep=""))
}
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
i=1
print(paste("replicate number ", i))
#first import and process the data
#import genalex files as dataframe
genetic_data = read.csv(paste(mydir, genalex_list[[i]], sep=""), header=FALSE)
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
length(genalex_list)
setwd("C:/Users/kayle/Documents/Pollen_dispersal_sims")
###MAKE SURE TO LOAD IN THE CORRECT DATA
load("R-scripts/combined_list_params_ideal.Rdata") #loading in function parameters defined in defining_function_parameters.R script
#including R-script containing functions used for import, conversions, and sampling
source("R-scripts/import_seed_functions.R")
#including edited arp2gen function
source("R-scripts/arp2gen_edit.R")
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
getwd()
#Defining this because arp2gen didn't want to use relative filepaths
mydir = "C:/Users/kayle/OneDrive/Documents/Pollen_dispersal_sims/Simulations/one_pop_2500/"
#importing and converting arlequin files to genepop files
import_arp2gen_files(mydir,".arp$")
#list of genalex files for all simulation replicates--genalex files end in .csv
#these have the simulated genetic data
genalex_list = list.files(mydir, ".csv$")
print(paste("replicate number ", i))
#first import and process the data
#import genalex files as dataframe
genetic_data = read.csv(paste(mydir, genalex_list[[i]], sep=""), header=FALSE)
#cut off first 2 rows in dataframe -- this is the population data, which is not required for our purposes
genetic_data = genetic_data[-2,]
genetic_data = genetic_data[-1,]
#giving the dataframe columns new names
names(genetic_data) = c("Ind", "Pop", loci_names)
genetic_data = genetic_data[-1,] #removing the first row -- repeat of now column headers
#calculating the number of alleles present in the parental dataset--we only need to do this once for each replicate
total = 0  #sum to keep track of total alleles
k=3 #counter variable for column (locus) of parental dataset
###MAKE SURE TO LOAD IN THE CORRECT DATA
#load("R-scripts/combined_list_params_ideal.Rdata") #loading in function parameters defined in defining_function_parameters.R script
load("R-scripts/combined_list_params_realistic.Rdata")
###MAKE SURE TO LOAD IN THE CORRECT DATA
#load("R-scripts/combined_list_params_ideal.Rdata") #loading in function parameters defined in defining_function_parameters.R script
load("../../R-scripts/combined_list_params_realistic.Rdata")
for(z in 1:num_loci){
parental_allele_list = table(c(as.matrix(genetic_data[,k:(k+1)]))) #getting alleles and their frequencies for locus i in parental dataframe
#parental_allele_list = parental_allele_list[parental_allele_list>3] #subsetting parental data to only include alleles with frequency greater than 3
total_names = names(parental_allele_list)
total = total + n_distinct(total_names) #getting the number of distinct values for locus 1 to count alleles
k = k+2 #increment k for next loop iteration
}
x=1
all_same_params[1]
all_eligible_params[1]
#including R-script containing functions used for import, conversions, and sampling
source("../../R-scripts/import_seed_functions.R")
x
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
#including R-script containing functions used for import, conversions, and sampling
source("../../R-scripts/import_seed_functions.R")
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
all_eligible_params[1]
all_eligible_params[1][2]
all_eligible_params[1][3]
all_eligible_params[[1]][[2]]
all_eligible_params[[1]][[3]]
all_eligible_params[[1]][[2]]
#call the function using that scenario and save the function return in temp
temp = sample_seed(genetic_data, all_eligible_params[[x]][[1]], all_eligible_params[[x]][[2]], all_eligible_params[[x]][[3]], all_eligible_params[[x]][[4]])
